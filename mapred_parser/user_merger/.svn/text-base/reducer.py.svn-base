#!/usr/bin/python
# coding=utf-8

import os
import sys
import time
import base64
sys.path.append(os.path.dirname(os.path.realpath(__file__)) + '/../')
from le_crawler.proto.video.ttypes import OriginalUser
from le_crawler.common.utils import str2mediavideo, thrift2str


user_merge_field = set(['user_name', 'url', 'portrait_url', 'play_num', 'fans_num'])


class MergeItem:
  def __init__(self):
    self.reset('')


  def reset(self, user_url=None):
    self._data = []
    self._user_url = user_url
    self._url = None # used only in which length of self._data is 1
    self._user = None


  def get_user_url(self):
    return self._user_url


  def add_item(self, user_url, out_type, url, data_base64):
    is_out_video = out_type == 'video'
    self._data.append((data_base64, is_out_video))
    self._url = url


  def _merge_user(self, datas):
    new_user = OriginalUser()
    for k, v in new_user.__dict__.iteritems():
      if k not in user_merge_field or v:
        continue
      for data in datas:
        old_v = getattr(data[0].user, k)
        if old_v:
          setattr(new_user, k, old_v)
          if k != 'url':
            for item in user_merge_field:
              old_v = getattr(data[0].user, item)
              if not getattr(new_user, item) and old_v:
                setattr(new_user, item, old_v)
          break
    new_user.update_time = int(time.time())
    self._user = new_user


  def _print_video(self, datas):
    for data in datas:
      data[0].user = self._user
      video_str = thrift2str(data[0])
      if not video_str:
        sys.stderr.write('ERROR: failed in thrift2str. %s\n' % data[0].url)
        continue
      video_base64 = base64.b64encode(video_str)
      if not video_base64:
        sys.stderr.write('ERROR: failed in base64 encode. %s\n' % data[0].url)
        continue
      print 'unique' + '\t' + data[0].url + '\t' + str(self._user_url) + '\t' + video_base64
      if data[1]:
        print 'video' + '\t' + data[0].url + '\t' + str(self._user_url) + '\t' + video_base64


  def print_item(self):
    if not self._data:
      return
    if len(self._data) == 1:
      print 'unique' + '\t' + self._url + '\t' + str(self._user_url) + '\t' + self._data[0][0]
      if self._data[0][1]:
        print 'video' + '\t' + self._url + '\t' + str(self._user_url) + '\t' + self._data[0][0]
      return
    for idx, data_group in enumerate(self._data):
      try:
        data = str2mediavideo(base64.b64decode(data_group[0]))
      except:
        sys.stderr.write('ERROR: failed in base64 decode. %s\n' % self._user_url)
      self._data[idx] = (data, data_group[1])
    self._data = [item for item in self._data if item[0]]
    self._data.sort(cmp=lambda x, y: (y[0].user.update_time or 0) - (x[0].user.update_time or 0))
    self._merge_user(self._data)
    self._print_video(self._data)


def main():
  merge_item = MergeItem()
  while 1:
    line = sys.stdin.readline()
    if not line:
      break

    line_data = line.strip().split('\t', 3)
    if len(line_data) != 4:
      sys.stderr.write(str(len(line_data)) + ' ' + str(line_data) + '\n')
      continue

    user_url, url, out_type, data_base64 = line_data
    if user_url == 'None':
      print 'unique' + '\t' + url + '\t' + user_url + '\t' + data_base64
      if out_type == 'video':
        print 'video' + '\t' + url + '\t' + user_url + '\t' + data_base64
      continue

    if user_url == merge_item.get_user_url():
      merge_item.add_item(user_url, out_type, url, data_base64)
    else:
      merge_item.print_item()
      merge_item.reset(user_url)
      merge_item.add_item(user_url, out_type, url, data_base64)
  merge_item.print_item()


if __name__ == '__main__':
  main()

