#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import le_crawler.proto.crawl.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class State:
  NORMAL = 0
  DEAD_LINK = 1
  NO_MD5 = 2
  LONG_VIDEO = 4

  _VALUES_TO_NAMES = {
    0: "NORMAL",
    1: "DEAD_LINK",
    2: "NO_MD5",
    4: "LONG_VIDEO",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 0,
    "DEAD_LINK": 1,
    "NO_MD5": 2,
    "LONG_VIDEO": 4,
  }

class DataType:
  VIDEO = 1
  AUDIO = 2

  _VALUES_TO_NAMES = {
    1: "VIDEO",
    2: "AUDIO",
  }

  _NAMES_TO_VALUES = {
    "VIDEO": 1,
    "AUDIO": 2,
  }


class Star:
  """
  Attributes:
   - id
   - name
   - name_en
   - name_cn
   - name_other
   - name_stage
   - name_origin
   - sex
   - area
   - birthday
   - poster
   - description
   - col_rating
   - commentator
   - tags
   - blood_type
   - astro
   - language
   - nation
   - height
   - weight
   - dead_date
   - dead_desc
   - professional
   - create_time
   - update_time
   - extend
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'name_en', None, None, ), # 3
    (4, TType.STRING, 'name_cn', None, None, ), # 4
    (5, TType.STRING, 'name_other', None, None, ), # 5
    (6, TType.STRING, 'name_stage', None, None, ), # 6
    (7, TType.STRING, 'name_origin', None, None, ), # 7
    (8, TType.STRING, 'sex', None, None, ), # 8
    (9, TType.STRING, 'area', None, None, ), # 9
    (10, TType.STRING, 'birthday', None, None, ), # 10
    (11, TType.STRING, 'poster', None, None, ), # 11
    (12, TType.STRING, 'description', None, None, ), # 12
    (13, TType.DOUBLE, 'col_rating', None, None, ), # 13
    (14, TType.I64, 'commentator', None, None, ), # 14
    (15, TType.STRING, 'tags', None, None, ), # 15
    (16, TType.STRING, 'blood_type', None, None, ), # 16
    (17, TType.STRING, 'astro', None, None, ), # 17
    (18, TType.STRING, 'language', None, None, ), # 18
    (19, TType.STRING, 'nation', None, None, ), # 19
    (20, TType.STRING, 'height', None, None, ), # 20
    (21, TType.STRING, 'weight', None, None, ), # 21
    (22, TType.STRING, 'dead_date', None, None, ), # 22
    (23, TType.STRING, 'dead_desc', None, None, ), # 23
    (24, TType.STRING, 'professional', None, None, ), # 24
    (25, TType.I64, 'create_time', None, None, ), # 25
    (26, TType.I64, 'update_time', None, None, ), # 26
    (27, TType.MAP, 'extend', (TType.STRING,None,TType.STRING,None), None, ), # 27
  )

  def __init__(self, id=None, name=None, name_en=None, name_cn=None, name_other=None, name_stage=None, name_origin=None, sex=None, area=None, birthday=None, poster=None, description=None, col_rating=None, commentator=None, tags=None, blood_type=None, astro=None, language=None, nation=None, height=None, weight=None, dead_date=None, dead_desc=None, professional=None, create_time=None, update_time=None, extend=None,):
    self.id = id
    self.name = name
    self.name_en = name_en
    self.name_cn = name_cn
    self.name_other = name_other
    self.name_stage = name_stage
    self.name_origin = name_origin
    self.sex = sex
    self.area = area
    self.birthday = birthday
    self.poster = poster
    self.description = description
    self.col_rating = col_rating
    self.commentator = commentator
    self.tags = tags
    self.blood_type = blood_type
    self.astro = astro
    self.language = language
    self.nation = nation
    self.height = height
    self.weight = weight
    self.dead_date = dead_date
    self.dead_desc = dead_desc
    self.professional = professional
    self.create_time = create_time
    self.update_time = update_time
    self.extend = extend

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name_en = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name_cn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name_other = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name_stage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.name_origin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.sex = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.birthday = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.col_rating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.commentator = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.tags = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.blood_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.astro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.nation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.height = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.weight = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.dead_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.dead_desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.professional = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.MAP:
          self.extend = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.extend[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Star')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 3)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.name_cn is not None:
      oprot.writeFieldBegin('name_cn', TType.STRING, 4)
      oprot.writeString(self.name_cn)
      oprot.writeFieldEnd()
    if self.name_other is not None:
      oprot.writeFieldBegin('name_other', TType.STRING, 5)
      oprot.writeString(self.name_other)
      oprot.writeFieldEnd()
    if self.name_stage is not None:
      oprot.writeFieldBegin('name_stage', TType.STRING, 6)
      oprot.writeString(self.name_stage)
      oprot.writeFieldEnd()
    if self.name_origin is not None:
      oprot.writeFieldBegin('name_origin', TType.STRING, 7)
      oprot.writeString(self.name_origin)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.STRING, 8)
      oprot.writeString(self.sex)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 9)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.birthday is not None:
      oprot.writeFieldBegin('birthday', TType.STRING, 10)
      oprot.writeString(self.birthday)
      oprot.writeFieldEnd()
    if self.poster is not None:
      oprot.writeFieldBegin('poster', TType.STRING, 11)
      oprot.writeString(self.poster)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 12)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.col_rating is not None:
      oprot.writeFieldBegin('col_rating', TType.DOUBLE, 13)
      oprot.writeDouble(self.col_rating)
      oprot.writeFieldEnd()
    if self.commentator is not None:
      oprot.writeFieldBegin('commentator', TType.I64, 14)
      oprot.writeI64(self.commentator)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.STRING, 15)
      oprot.writeString(self.tags)
      oprot.writeFieldEnd()
    if self.blood_type is not None:
      oprot.writeFieldBegin('blood_type', TType.STRING, 16)
      oprot.writeString(self.blood_type)
      oprot.writeFieldEnd()
    if self.astro is not None:
      oprot.writeFieldBegin('astro', TType.STRING, 17)
      oprot.writeString(self.astro)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 18)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.nation is not None:
      oprot.writeFieldBegin('nation', TType.STRING, 19)
      oprot.writeString(self.nation)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.STRING, 20)
      oprot.writeString(self.height)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.STRING, 21)
      oprot.writeString(self.weight)
      oprot.writeFieldEnd()
    if self.dead_date is not None:
      oprot.writeFieldBegin('dead_date', TType.STRING, 22)
      oprot.writeString(self.dead_date)
      oprot.writeFieldEnd()
    if self.dead_desc is not None:
      oprot.writeFieldBegin('dead_desc', TType.STRING, 23)
      oprot.writeString(self.dead_desc)
      oprot.writeFieldEnd()
    if self.professional is not None:
      oprot.writeFieldBegin('professional', TType.STRING, 24)
      oprot.writeString(self.professional)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 25)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 26)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.MAP, 27)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
      for kiter7,viter8 in self.extend.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Artist:
  """
  Attributes:
   - id
   - url
   - name
   - name_en
   - name_cn
   - name_origin
   - style
   - fans_num
   - sex
   - birthday
   - poster
   - description
   - rating
   - tags
   - language
   - nation
   - height
   - weight
   - dead_date
   - area
   - create_time
   - update_time
   - album_urls
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'name_en', None, None, ), # 4
    (5, TType.STRING, 'name_cn', None, None, ), # 5
    (6, TType.STRING, 'name_origin', None, None, ), # 6
    (7, TType.LIST, 'style', (TType.STRING,None), None, ), # 7
    (8, TType.I64, 'fans_num', None, None, ), # 8
    (9, TType.I32, 'sex', None,     0, ), # 9
    (10, TType.STRING, 'birthday', None, None, ), # 10
    (11, TType.STRING, 'poster', None, None, ), # 11
    (12, TType.STRING, 'description', None, None, ), # 12
    (13, TType.DOUBLE, 'rating', None, None, ), # 13
    (14, TType.LIST, 'tags', (TType.STRING,None), None, ), # 14
    (15, TType.STRING, 'language', None, None, ), # 15
    (16, TType.STRING, 'nation', None, None, ), # 16
    (17, TType.STRING, 'height', None, None, ), # 17
    (18, TType.STRING, 'weight', None, None, ), # 18
    (19, TType.STRING, 'dead_date', None, None, ), # 19
    (20, TType.STRING, 'area', None, None, ), # 20
    (21, TType.I64, 'create_time', None, None, ), # 21
    (22, TType.I64, 'update_time', None, None, ), # 22
    (23, TType.LIST, 'album_urls', (TType.STRING,None), None, ), # 23
  )

  def __init__(self, id=None, url=None, name=None, name_en=None, name_cn=None, name_origin=None, style=None, fans_num=None, sex=thrift_spec[9][4], birthday=None, poster=None, description=None, rating=None, tags=None, language=None, nation=None, height=None, weight=None, dead_date=None, area=None, create_time=None, update_time=None, album_urls=None,):
    self.id = id
    self.url = url
    self.name = name
    self.name_en = name_en
    self.name_cn = name_cn
    self.name_origin = name_origin
    self.style = style
    self.fans_num = fans_num
    self.sex = sex
    self.birthday = birthday
    self.poster = poster
    self.description = description
    self.rating = rating
    self.tags = tags
    self.language = language
    self.nation = nation
    self.height = height
    self.weight = weight
    self.dead_date = dead_date
    self.area = area
    self.create_time = create_time
    self.update_time = update_time
    self.album_urls = album_urls

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name_en = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name_cn = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.name_origin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.style = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = iprot.readString();
            self.style.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.fans_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.birthday = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.rating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.tags = []
          (_etype18, _size15) = iprot.readListBegin()
          for _i19 in xrange(_size15):
            _elem20 = iprot.readString();
            self.tags.append(_elem20)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.nation = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.height = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.weight = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.dead_date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.album_urls = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.album_urls.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Artist')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.name_en is not None:
      oprot.writeFieldBegin('name_en', TType.STRING, 4)
      oprot.writeString(self.name_en)
      oprot.writeFieldEnd()
    if self.name_cn is not None:
      oprot.writeFieldBegin('name_cn', TType.STRING, 5)
      oprot.writeString(self.name_cn)
      oprot.writeFieldEnd()
    if self.name_origin is not None:
      oprot.writeFieldBegin('name_origin', TType.STRING, 6)
      oprot.writeString(self.name_origin)
      oprot.writeFieldEnd()
    if self.style is not None:
      oprot.writeFieldBegin('style', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.style))
      for iter27 in self.style:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.fans_num is not None:
      oprot.writeFieldBegin('fans_num', TType.I64, 8)
      oprot.writeI64(self.fans_num)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 9)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.birthday is not None:
      oprot.writeFieldBegin('birthday', TType.STRING, 10)
      oprot.writeString(self.birthday)
      oprot.writeFieldEnd()
    if self.poster is not None:
      oprot.writeFieldBegin('poster', TType.STRING, 11)
      oprot.writeString(self.poster)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 12)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.rating is not None:
      oprot.writeFieldBegin('rating', TType.DOUBLE, 13)
      oprot.writeDouble(self.rating)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.LIST, 14)
      oprot.writeListBegin(TType.STRING, len(self.tags))
      for iter28 in self.tags:
        oprot.writeString(iter28)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 15)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.nation is not None:
      oprot.writeFieldBegin('nation', TType.STRING, 16)
      oprot.writeString(self.nation)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.STRING, 17)
      oprot.writeString(self.height)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.STRING, 18)
      oprot.writeString(self.weight)
      oprot.writeFieldEnd()
    if self.dead_date is not None:
      oprot.writeFieldBegin('dead_date', TType.STRING, 19)
      oprot.writeString(self.dead_date)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 20)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 21)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 22)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.album_urls is not None:
      oprot.writeFieldBegin('album_urls', TType.LIST, 23)
      oprot.writeListBegin(TType.STRING, len(self.album_urls))
      for iter29 in self.album_urls:
        oprot.writeString(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Album:
  """
  Attributes:
   - id
   - url
   - name
   - language
   - description
   - poster
   - rating
   - play_total
   - record_company
   - show_time
   - category
   - style
   - tags
   - collects_num
   - comments_num
   - artist_urls
   - create_time
   - update_time
   - song_urls
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'language', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.STRING, 'poster', None, None, ), # 6
    (7, TType.DOUBLE, 'rating', None, None, ), # 7
    (8, TType.I64, 'play_total', None, None, ), # 8
    (9, TType.STRING, 'record_company', None, None, ), # 9
    (10, TType.STRING, 'show_time', None, None, ), # 10
    (11, TType.STRING, 'category', None, None, ), # 11
    (12, TType.STRING, 'style', None, None, ), # 12
    (13, TType.STRING, 'tags', None, None, ), # 13
    (14, TType.I64, 'collects_num', None, None, ), # 14
    (15, TType.I32, 'comments_num', None, None, ), # 15
    (16, TType.LIST, 'artist_urls', (TType.STRING,None), None, ), # 16
    (17, TType.I64, 'create_time', None, None, ), # 17
    (18, TType.I64, 'update_time', None, None, ), # 18
    (19, TType.LIST, 'song_urls', (TType.STRING,None), None, ), # 19
  )

  def __init__(self, id=None, url=None, name=None, language=None, description=None, poster=None, rating=None, play_total=None, record_company=None, show_time=None, category=None, style=None, tags=None, collects_num=None, comments_num=None, artist_urls=None, create_time=None, update_time=None, song_urls=None,):
    self.id = id
    self.url = url
    self.name = name
    self.language = language
    self.description = description
    self.poster = poster
    self.rating = rating
    self.play_total = play_total
    self.record_company = record_company
    self.show_time = show_time
    self.category = category
    self.style = style
    self.tags = tags
    self.collects_num = collects_num
    self.comments_num = comments_num
    self.artist_urls = artist_urls
    self.create_time = create_time
    self.update_time = update_time
    self.song_urls = song_urls

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.rating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.play_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.record_company = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.show_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.category = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.style = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.tags = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.collects_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.comments_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.artist_urls = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readString();
            self.artist_urls.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.song_urls = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readString();
            self.song_urls.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Album')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 4)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.poster is not None:
      oprot.writeFieldBegin('poster', TType.STRING, 6)
      oprot.writeString(self.poster)
      oprot.writeFieldEnd()
    if self.rating is not None:
      oprot.writeFieldBegin('rating', TType.DOUBLE, 7)
      oprot.writeDouble(self.rating)
      oprot.writeFieldEnd()
    if self.play_total is not None:
      oprot.writeFieldBegin('play_total', TType.I64, 8)
      oprot.writeI64(self.play_total)
      oprot.writeFieldEnd()
    if self.record_company is not None:
      oprot.writeFieldBegin('record_company', TType.STRING, 9)
      oprot.writeString(self.record_company)
      oprot.writeFieldEnd()
    if self.show_time is not None:
      oprot.writeFieldBegin('show_time', TType.STRING, 10)
      oprot.writeString(self.show_time)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRING, 11)
      oprot.writeString(self.category)
      oprot.writeFieldEnd()
    if self.style is not None:
      oprot.writeFieldBegin('style', TType.STRING, 12)
      oprot.writeString(self.style)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.STRING, 13)
      oprot.writeString(self.tags)
      oprot.writeFieldEnd()
    if self.collects_num is not None:
      oprot.writeFieldBegin('collects_num', TType.I64, 14)
      oprot.writeI64(self.collects_num)
      oprot.writeFieldEnd()
    if self.comments_num is not None:
      oprot.writeFieldBegin('comments_num', TType.I32, 15)
      oprot.writeI32(self.comments_num)
      oprot.writeFieldEnd()
    if self.artist_urls is not None:
      oprot.writeFieldBegin('artist_urls', TType.LIST, 16)
      oprot.writeListBegin(TType.STRING, len(self.artist_urls))
      for iter42 in self.artist_urls:
        oprot.writeString(iter42)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 17)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 18)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.song_urls is not None:
      oprot.writeFieldBegin('song_urls', TType.LIST, 19)
      oprot.writeListBegin(TType.STRING, len(self.song_urls))
      for iter43 in self.song_urls:
        oprot.writeString(iter43)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OriginalUser:
  """
  Attributes:
   - user_name
   - url
   - portrait_url
   - video_num
   - play_num
   - fans_num
   - channel_desc
   - update_time
   - channel_id
   - channel_title
   - thumbnails
   - publish_time
   - comment_num
   - thumbnail_list
   - country
   - category_proportion_list
   - language_proportion_list
   - in_related_user
   - out_related_user
   - state
   - display_countrys
   - mined_countrys
   - country_info
   - country_source_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user_name', None, None, ), # 1
    (2, TType.STRING, 'url', None, None, ), # 2
    (3, TType.STRING, 'portrait_url', None, None, ), # 3
    (4, TType.I32, 'video_num', None, None, ), # 4
    (5, TType.I64, 'play_num', None, None, ), # 5
    (6, TType.I64, 'fans_num', None, None, ), # 6
    (7, TType.STRING, 'channel_desc', None, None, ), # 7
    (8, TType.I64, 'update_time', None, None, ), # 8
    (9, TType.STRING, 'channel_id', None, None, ), # 9
    (10, TType.STRING, 'channel_title', None, None, ), # 10
    (11, TType.STRING, 'thumbnails', None, None, ), # 11
    (12, TType.I64, 'publish_time', None, None, ), # 12
    (13, TType.I32, 'comment_num', None, None, ), # 13
    (14, TType.LIST, 'thumbnail_list', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.Thumbnail, le_crawler.proto.crawl.ttypes.Thumbnail.thrift_spec)), None, ), # 14
    (15, TType.STRING, 'country', None, None, ), # 15
    (16, TType.LIST, 'category_proportion_list', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.CategoryProportion, le_crawler.proto.crawl.ttypes.CategoryProportion.thrift_spec)), None, ), # 16
    (17, TType.LIST, 'language_proportion_list', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.LanguageProportion, le_crawler.proto.crawl.ttypes.LanguageProportion.thrift_spec)), None, ), # 17
    (18, TType.LIST, 'in_related_user', (TType.STRING,None), None, ), # 18
    (19, TType.LIST, 'out_related_user', (TType.STRING,None), None, ), # 19
    (20, TType.I32, 'state', None,     0, ), # 20
    (21, TType.LIST, 'display_countrys', (TType.STRING,None), None, ), # 21
    (22, TType.LIST, 'mined_countrys', (TType.STRING,None), None, ), # 22
    (23, TType.LIST, 'country_info', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.CountryInfo, le_crawler.proto.crawl.ttypes.CountryInfo.thrift_spec)), None, ), # 23
    (24, TType.LIST, 'country_source_list', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.CountrySourceInfo, le_crawler.proto.crawl.ttypes.CountrySourceInfo.thrift_spec)), None, ), # 24
  )

  def __init__(self, user_name=None, url=None, portrait_url=None, video_num=None, play_num=None, fans_num=None, channel_desc=None, update_time=None, channel_id=None, channel_title=None, thumbnails=None, publish_time=None, comment_num=None, thumbnail_list=None, country=None, category_proportion_list=None, language_proportion_list=None, in_related_user=None, out_related_user=None, state=thrift_spec[20][4], display_countrys=None, mined_countrys=None, country_info=None, country_source_list=None,):
    self.user_name = user_name
    self.url = url
    self.portrait_url = portrait_url
    self.video_num = video_num
    self.play_num = play_num
    self.fans_num = fans_num
    self.channel_desc = channel_desc
    self.update_time = update_time
    self.channel_id = channel_id
    self.channel_title = channel_title
    self.thumbnails = thumbnails
    self.publish_time = publish_time
    self.comment_num = comment_num
    self.thumbnail_list = thumbnail_list
    self.country = country
    self.category_proportion_list = category_proportion_list
    self.language_proportion_list = language_proportion_list
    self.in_related_user = in_related_user
    self.out_related_user = out_related_user
    self.state = state
    self.display_countrys = display_countrys
    self.mined_countrys = mined_countrys
    self.country_info = country_info
    self.country_source_list = country_source_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.portrait_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.video_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.play_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.fans_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.channel_desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.channel_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.channel_title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.thumbnails = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.publish_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.thumbnail_list = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = le_crawler.proto.crawl.ttypes.Thumbnail()
            _elem49.read(iprot)
            self.thumbnail_list.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.category_proportion_list = []
          (_etype53, _size50) = iprot.readListBegin()
          for _i54 in xrange(_size50):
            _elem55 = le_crawler.proto.crawl.ttypes.CategoryProportion()
            _elem55.read(iprot)
            self.category_proportion_list.append(_elem55)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.language_proportion_list = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = le_crawler.proto.crawl.ttypes.LanguageProportion()
            _elem61.read(iprot)
            self.language_proportion_list.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.in_related_user = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = iprot.readString();
            self.in_related_user.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.out_related_user = []
          (_etype71, _size68) = iprot.readListBegin()
          for _i72 in xrange(_size68):
            _elem73 = iprot.readString();
            self.out_related_user.append(_elem73)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.display_countrys = []
          (_etype77, _size74) = iprot.readListBegin()
          for _i78 in xrange(_size74):
            _elem79 = iprot.readString();
            self.display_countrys.append(_elem79)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.mined_countrys = []
          (_etype83, _size80) = iprot.readListBegin()
          for _i84 in xrange(_size80):
            _elem85 = iprot.readString();
            self.mined_countrys.append(_elem85)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.country_info = []
          (_etype89, _size86) = iprot.readListBegin()
          for _i90 in xrange(_size86):
            _elem91 = le_crawler.proto.crawl.ttypes.CountryInfo()
            _elem91.read(iprot)
            self.country_info.append(_elem91)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.country_source_list = []
          (_etype95, _size92) = iprot.readListBegin()
          for _i96 in xrange(_size92):
            _elem97 = le_crawler.proto.crawl.ttypes.CountrySourceInfo()
            _elem97.read(iprot)
            self.country_source_list.append(_elem97)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OriginalUser')
    if self.user_name is not None:
      oprot.writeFieldBegin('user_name', TType.STRING, 1)
      oprot.writeString(self.user_name)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 2)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.portrait_url is not None:
      oprot.writeFieldBegin('portrait_url', TType.STRING, 3)
      oprot.writeString(self.portrait_url)
      oprot.writeFieldEnd()
    if self.video_num is not None:
      oprot.writeFieldBegin('video_num', TType.I32, 4)
      oprot.writeI32(self.video_num)
      oprot.writeFieldEnd()
    if self.play_num is not None:
      oprot.writeFieldBegin('play_num', TType.I64, 5)
      oprot.writeI64(self.play_num)
      oprot.writeFieldEnd()
    if self.fans_num is not None:
      oprot.writeFieldBegin('fans_num', TType.I64, 6)
      oprot.writeI64(self.fans_num)
      oprot.writeFieldEnd()
    if self.channel_desc is not None:
      oprot.writeFieldBegin('channel_desc', TType.STRING, 7)
      oprot.writeString(self.channel_desc)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 8)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.channel_id is not None:
      oprot.writeFieldBegin('channel_id', TType.STRING, 9)
      oprot.writeString(self.channel_id)
      oprot.writeFieldEnd()
    if self.channel_title is not None:
      oprot.writeFieldBegin('channel_title', TType.STRING, 10)
      oprot.writeString(self.channel_title)
      oprot.writeFieldEnd()
    if self.thumbnails is not None:
      oprot.writeFieldBegin('thumbnails', TType.STRING, 11)
      oprot.writeString(self.thumbnails)
      oprot.writeFieldEnd()
    if self.publish_time is not None:
      oprot.writeFieldBegin('publish_time', TType.I64, 12)
      oprot.writeI64(self.publish_time)
      oprot.writeFieldEnd()
    if self.comment_num is not None:
      oprot.writeFieldBegin('comment_num', TType.I32, 13)
      oprot.writeI32(self.comment_num)
      oprot.writeFieldEnd()
    if self.thumbnail_list is not None:
      oprot.writeFieldBegin('thumbnail_list', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.thumbnail_list))
      for iter98 in self.thumbnail_list:
        iter98.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 15)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.category_proportion_list is not None:
      oprot.writeFieldBegin('category_proportion_list', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.category_proportion_list))
      for iter99 in self.category_proportion_list:
        iter99.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.language_proportion_list is not None:
      oprot.writeFieldBegin('language_proportion_list', TType.LIST, 17)
      oprot.writeListBegin(TType.STRUCT, len(self.language_proportion_list))
      for iter100 in self.language_proportion_list:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.in_related_user is not None:
      oprot.writeFieldBegin('in_related_user', TType.LIST, 18)
      oprot.writeListBegin(TType.STRING, len(self.in_related_user))
      for iter101 in self.in_related_user:
        oprot.writeString(iter101)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.out_related_user is not None:
      oprot.writeFieldBegin('out_related_user', TType.LIST, 19)
      oprot.writeListBegin(TType.STRING, len(self.out_related_user))
      for iter102 in self.out_related_user:
        oprot.writeString(iter102)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 20)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.display_countrys is not None:
      oprot.writeFieldBegin('display_countrys', TType.LIST, 21)
      oprot.writeListBegin(TType.STRING, len(self.display_countrys))
      for iter103 in self.display_countrys:
        oprot.writeString(iter103)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.mined_countrys is not None:
      oprot.writeFieldBegin('mined_countrys', TType.LIST, 22)
      oprot.writeListBegin(TType.STRING, len(self.mined_countrys))
      for iter104 in self.mined_countrys:
        oprot.writeString(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.country_info is not None:
      oprot.writeFieldBegin('country_info', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.country_info))
      for iter105 in self.country_info:
        iter105.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.country_source_list is not None:
      oprot.writeFieldBegin('country_source_list', TType.LIST, 24)
      oprot.writeListBegin(TType.STRUCT, len(self.country_source_list))
      for iter106 in self.country_source_list:
        iter106.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MediaVideo:
  """
  Attributes:
   - id
   - domain
   - domain_id
   - category
   - category_id
   - title
   - subtitle
   - title_other
   - title_en
   - actor
   - actor_id
   - director
   - director_id
   - writer
   - writer_id
   - showtime
   - showyear
   - area
   - subcategory
   - subcategory_id
   - language
   - language_id
   - fit_age
   - fit_age_id
   - short_desc
   - desc
   - tags
   - poster
   - collects
   - rating
   - commentator
   - episodes
   - is_end
   - url
   - quality
   - duration
   - copyright
   - state
   - type
   - type_id
   - version
   - version_id
   - is_pay
   - play_day_total
   - play_week_total
   - play_month_total
   - play_season_total
   - play_year_total
   - play_total
   - create_time
   - update_time
   - delete_time
   - platform_download
   - platform_play
   - platform_pay
   - publish_status
   - douban_id
   - resolution
   - is_edit
   - extend
   - episode
   - porder
   - dup
   - is_404
   - is_soft404
   - area_id
   - voteup_count
   - votedown_count
   - play_trends
   - category_list
   - crumbs
   - crawl_time
   - content_timestamp
   - duration_seconds
   - OBSOLETE_inlink
   - OBSOLETE_outlink
   - page_state
   - crawl_history
   - doc_id
   - discover_time
   - in_links
   - user
   - playlist
   - dimension
   - caption
   - comment_num
   - source_type
   - thumbnails
   - content_quality
   - player
   - thumbnail_list
   - dead_link
   - stream_url
   - language_type
   - inlink_history
   - region_strategy
   - external_id
   - user_url
   - global_id
   - artists
   - album
   - author
   - composer
   - arranger
   - lyrics
   - share_num
   - data_type
   - awards
   - long_comments
   - short_comments
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'domain', None, None, ), # 2
    (3, TType.I32, 'domain_id', None, None, ), # 3
    (4, TType.STRING, 'category', None, None, ), # 4
    (5, TType.STRING, 'category_id', None, None, ), # 5
    (6, TType.STRING, 'title', None, None, ), # 6
    (7, TType.STRING, 'subtitle', None, None, ), # 7
    (8, TType.STRING, 'title_other', None, None, ), # 8
    (9, TType.STRING, 'title_en', None, None, ), # 9
    (10, TType.STRING, 'actor', None, None, ), # 10
    (11, TType.STRING, 'actor_id', None, None, ), # 11
    (12, TType.STRING, 'director', None, None, ), # 12
    (13, TType.STRING, 'director_id', None, None, ), # 13
    (14, TType.STRING, 'writer', None, None, ), # 14
    (15, TType.STRING, 'writer_id', None, None, ), # 15
    (16, TType.STRING, 'showtime', None, None, ), # 16
    (17, TType.I32, 'showyear', None, None, ), # 17
    (18, TType.STRING, 'area', None, None, ), # 18
    (19, TType.STRING, 'subcategory', None, None, ), # 19
    (20, TType.STRING, 'subcategory_id', None, None, ), # 20
    (21, TType.STRING, 'language', None, None, ), # 21
    (22, TType.I32, 'language_id', None, None, ), # 22
    (23, TType.STRING, 'fit_age', None, None, ), # 23
    (24, TType.STRING, 'fit_age_id', None, None, ), # 24
    (25, TType.STRING, 'short_desc', None, None, ), # 25
    (26, TType.STRING, 'desc', None, None, ), # 26
    (27, TType.STRING, 'tags', None, None, ), # 27
    (28, TType.STRING, 'poster', None, None, ), # 28
    (29, TType.I64, 'collects', None, None, ), # 29
    (30, TType.DOUBLE, 'rating', None, None, ), # 30
    (31, TType.I32, 'commentator', None, None, ), # 31
    (32, TType.I32, 'episodes', None, None, ), # 32
    (33, TType.I32, 'is_end', None, None, ), # 33
    (34, TType.STRING, 'url', None, None, ), # 34
    (35, TType.STRING, 'quality', None, None, ), # 35
    (36, TType.STRING, 'duration', None, None, ), # 36
    (37, TType.I32, 'copyright', None, None, ), # 37
    (38, TType.I32, 'state', None, None, ), # 38
    (39, TType.STRING, 'type', None, None, ), # 39
    (40, TType.I32, 'type_id', None, None, ), # 40
    (41, TType.STRING, 'version', None, None, ), # 41
    (42, TType.I32, 'version_id', None, None, ), # 42
    (43, TType.I32, 'is_pay', None, None, ), # 43
    (44, TType.I64, 'play_day_total', None, None, ), # 44
    (45, TType.I64, 'play_week_total', None, None, ), # 45
    (46, TType.I64, 'play_month_total', None, None, ), # 46
    (47, TType.I64, 'play_season_total', None, None, ), # 47
    (48, TType.I64, 'play_year_total', None, None, ), # 48
    (49, TType.I64, 'play_total', None, None, ), # 49
    (50, TType.I64, 'create_time', None, None, ), # 50
    (51, TType.I64, 'update_time', None, None, ), # 51
    (52, TType.I64, 'delete_time', None, None, ), # 52
    (53, TType.STRING, 'platform_download', None, None, ), # 53
    (54, TType.STRING, 'platform_play', None, None, ), # 54
    (55, TType.STRING, 'platform_pay', None, None, ), # 55
    (56, TType.STRING, 'publish_status', None, None, ), # 56
    (57, TType.STRING, 'douban_id', None, None, ), # 57
    None, # 58
    (59, TType.STRING, 'resolution', None, None, ), # 59
    (60, TType.I32, 'is_edit', None, None, ), # 60
    (61, TType.MAP, 'extend', (TType.STRING,None,TType.STRING,None), None, ), # 61
    (62, TType.STRING, 'episode', None, None, ), # 62
    (63, TType.I32, 'porder', None, None, ), # 63
    (64, TType.BOOL, 'dup', None, False, ), # 64
    (65, TType.BOOL, 'is_404', None, False, ), # 65
    (66, TType.BOOL, 'is_soft404', None, False, ), # 66
    (67, TType.STRING, 'area_id', None, None, ), # 67
    (68, TType.I64, 'voteup_count', None, 0, ), # 68
    (69, TType.I64, 'votedown_count', None, 0, ), # 69
    (70, TType.STRING, 'play_trends', None, None, ), # 70
    (71, TType.STRING, 'category_list', None, None, ), # 71
    (72, TType.STRING, 'crumbs', None, None, ), # 72
    (73, TType.I64, 'crawl_time', None, None, ), # 73
    (74, TType.I64, 'content_timestamp', None, None, ), # 74
    (75, TType.I64, 'duration_seconds', None, None, ), # 75
    (76, TType.LIST, 'OBSOLETE_inlink', (TType.STRING,None), None, ), # 76
    (77, TType.LIST, 'OBSOLETE_outlink', (TType.STRING,None), None, ), # 77
    (78, TType.I32, 'page_state', None,     0, ), # 78
    (79, TType.STRUCT, 'crawl_history', (le_crawler.proto.crawl.ttypes.CrawlHistory, le_crawler.proto.crawl.ttypes.CrawlHistory.thrift_spec), None, ), # 79
    (80, TType.I64, 'doc_id', None, None, ), # 80
    (81, TType.I64, 'discover_time', None, None, ), # 81
    (82, TType.LIST, 'in_links', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.Anchor, le_crawler.proto.crawl.ttypes.Anchor.thrift_spec)), None, ), # 82
    (83, TType.STRUCT, 'user', (OriginalUser, OriginalUser.thrift_spec), None, ), # 83
    (84, TType.STRING, 'playlist', None, None, ), # 84
    (85, TType.STRING, 'dimension', None, None, ), # 85
    (86, TType.BOOL, 'caption', None, None, ), # 86
    (87, TType.I64, 'comment_num', None, None, ), # 87
    (88, TType.I32, 'source_type', None, None, ), # 88
    (89, TType.STRING, 'thumbnails', None, None, ), # 89
    (90, TType.I16, 'content_quality', None, None, ), # 90
    (91, TType.STRING, 'player', None, None, ), # 91
    (92, TType.LIST, 'thumbnail_list', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.Thumbnail, le_crawler.proto.crawl.ttypes.Thumbnail.thrift_spec)), None, ), # 92
    (93, TType.BOOL, 'dead_link', None, False, ), # 93
    (94, TType.STRING, 'stream_url', None, None, ), # 94
    (95, TType.I32, 'language_type', None, None, ), # 95
    (96, TType.LIST, 'inlink_history', (TType.LIST,(TType.STRUCT,(le_crawler.proto.crawl.ttypes.Anchor, le_crawler.proto.crawl.ttypes.Anchor.thrift_spec))), None, ), # 96
    (97, TType.STRUCT, 'region_strategy', (le_crawler.proto.crawl.ttypes.RegionStrategy, le_crawler.proto.crawl.ttypes.RegionStrategy.thrift_spec), None, ), # 97
    (98, TType.STRING, 'external_id', None, None, ), # 98
    (99, TType.STRING, 'user_url', None, None, ), # 99
    (100, TType.STRING, 'global_id', None, None, ), # 100
    (101, TType.LIST, 'artists', (TType.STRUCT,(Artist, Artist.thrift_spec)), None, ), # 101
    (102, TType.STRUCT, 'album', (Album, Album.thrift_spec), None, ), # 102
    (103, TType.LIST, 'author', (TType.STRUCT,(Artist, Artist.thrift_spec)), None, ), # 103
    (104, TType.LIST, 'composer', (TType.STRUCT,(Artist, Artist.thrift_spec)), None, ), # 104
    (105, TType.LIST, 'arranger', (TType.STRUCT,(Artist, Artist.thrift_spec)), None, ), # 105
    (106, TType.STRING, 'lyrics', None, None, ), # 106
    (107, TType.I32, 'share_num', None, None, ), # 107
    (108, TType.I32, 'data_type', None,     1, ), # 108
    (109, TType.LIST, 'awards', (TType.STRING,None), None, ), # 109
    (110, TType.LIST, 'long_comments', (TType.STRING,None), None, ), # 110
    (111, TType.LIST, 'short_comments', (TType.STRING,None), None, ), # 111
  )

  def __init__(self, id=None, domain=None, domain_id=None, category=None, category_id=None, title=None, subtitle=None, title_other=None, title_en=None, actor=None, actor_id=None, director=None, director_id=None, writer=None, writer_id=None, showtime=None, showyear=None, area=None, subcategory=None, subcategory_id=None, language=None, language_id=None, fit_age=None, fit_age_id=None, short_desc=None, desc=None, tags=None, poster=None, collects=None, rating=None, commentator=None, episodes=None, is_end=None, url=None, quality=None, duration=None, copyright=None, state=None, type=None, type_id=None, version=None, version_id=None, is_pay=None, play_day_total=None, play_week_total=None, play_month_total=None, play_season_total=None, play_year_total=None, play_total=None, create_time=None, update_time=None, delete_time=None, platform_download=None, platform_play=None, platform_pay=None, publish_status=None, douban_id=None, resolution=None, is_edit=None, extend=None, episode=None, porder=None, dup=thrift_spec[64][4], is_404=thrift_spec[65][4], is_soft404=thrift_spec[66][4], area_id=None, voteup_count=thrift_spec[68][4], votedown_count=thrift_spec[69][4], play_trends=None, category_list=None, crumbs=None, crawl_time=None, content_timestamp=None, duration_seconds=None, OBSOLETE_inlink=None, OBSOLETE_outlink=None, page_state=thrift_spec[78][4], crawl_history=None, doc_id=None, discover_time=None, in_links=None, user=None, playlist=None, dimension=None, caption=None, comment_num=None, source_type=None, thumbnails=None, content_quality=None, player=None, thumbnail_list=None, dead_link=thrift_spec[93][4], stream_url=None, language_type=None, inlink_history=None, region_strategy=None, external_id=None, user_url=None, global_id=None, artists=None, album=None, author=None, composer=None, arranger=None, lyrics=None, share_num=None, data_type=thrift_spec[108][4], awards=None, long_comments=None, short_comments=None,):
    self.id = id
    self.domain = domain
    self.domain_id = domain_id
    self.category = category
    self.category_id = category_id
    self.title = title
    self.subtitle = subtitle
    self.title_other = title_other
    self.title_en = title_en
    self.actor = actor
    self.actor_id = actor_id
    self.director = director
    self.director_id = director_id
    self.writer = writer
    self.writer_id = writer_id
    self.showtime = showtime
    self.showyear = showyear
    self.area = area
    self.subcategory = subcategory
    self.subcategory_id = subcategory_id
    self.language = language
    self.language_id = language_id
    self.fit_age = fit_age
    self.fit_age_id = fit_age_id
    self.short_desc = short_desc
    self.desc = desc
    self.tags = tags
    self.poster = poster
    self.collects = collects
    self.rating = rating
    self.commentator = commentator
    self.episodes = episodes
    self.is_end = is_end
    self.url = url
    self.quality = quality
    self.duration = duration
    self.copyright = copyright
    self.state = state
    self.type = type
    self.type_id = type_id
    self.version = version
    self.version_id = version_id
    self.is_pay = is_pay
    self.play_day_total = play_day_total
    self.play_week_total = play_week_total
    self.play_month_total = play_month_total
    self.play_season_total = play_season_total
    self.play_year_total = play_year_total
    self.play_total = play_total
    self.create_time = create_time
    self.update_time = update_time
    self.delete_time = delete_time
    self.platform_download = platform_download
    self.platform_play = platform_play
    self.platform_pay = platform_pay
    self.publish_status = publish_status
    self.douban_id = douban_id
    self.resolution = resolution
    self.is_edit = is_edit
    self.extend = extend
    self.episode = episode
    self.porder = porder
    self.dup = dup
    self.is_404 = is_404
    self.is_soft404 = is_soft404
    self.area_id = area_id
    self.voteup_count = voteup_count
    self.votedown_count = votedown_count
    self.play_trends = play_trends
    self.category_list = category_list
    self.crumbs = crumbs
    self.crawl_time = crawl_time
    self.content_timestamp = content_timestamp
    self.duration_seconds = duration_seconds
    self.OBSOLETE_inlink = OBSOLETE_inlink
    self.OBSOLETE_outlink = OBSOLETE_outlink
    self.page_state = page_state
    self.crawl_history = crawl_history
    self.doc_id = doc_id
    self.discover_time = discover_time
    self.in_links = in_links
    self.user = user
    self.playlist = playlist
    self.dimension = dimension
    self.caption = caption
    self.comment_num = comment_num
    self.source_type = source_type
    self.thumbnails = thumbnails
    self.content_quality = content_quality
    self.player = player
    self.thumbnail_list = thumbnail_list
    self.dead_link = dead_link
    self.stream_url = stream_url
    self.language_type = language_type
    self.inlink_history = inlink_history
    self.region_strategy = region_strategy
    self.external_id = external_id
    self.user_url = user_url
    self.global_id = global_id
    self.artists = artists
    self.album = album
    self.author = author
    self.composer = composer
    self.arranger = arranger
    self.lyrics = lyrics
    self.share_num = share_num
    self.data_type = data_type
    self.awards = awards
    self.long_comments = long_comments
    self.short_comments = short_comments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.domain_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.category = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.category_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.subtitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.title_other = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.title_en = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.actor = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.actor_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.director = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.director_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.writer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.writer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.showtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.showyear = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.subcategory = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.subcategory_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.language_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.fit_age = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.fit_age_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.short_desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.desc = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.tags = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.collects = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.rating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.commentator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.episodes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.is_end = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRING:
          self.quality = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.duration = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.copyright = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.version_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.is_pay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I64:
          self.play_day_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I64:
          self.play_week_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I64:
          self.play_month_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I64:
          self.play_season_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I64:
          self.play_year_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I64:
          self.play_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I64:
          self.delete_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.STRING:
          self.platform_download = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRING:
          self.platform_play = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.STRING:
          self.platform_pay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.STRING:
          self.publish_status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.STRING:
          self.douban_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.resolution = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.is_edit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.MAP:
          self.extend = {}
          (_ktype108, _vtype109, _size107 ) = iprot.readMapBegin()
          for _i111 in xrange(_size107):
            _key112 = iprot.readString();
            _val113 = iprot.readString();
            self.extend[_key112] = _val113
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.STRING:
          self.episode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.I32:
          self.porder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.BOOL:
          self.dup = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.BOOL:
          self.is_404 = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.BOOL:
          self.is_soft404 = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.STRING:
          self.area_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.I64:
          self.voteup_count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 69:
        if ftype == TType.I64:
          self.votedown_count = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRING:
          self.play_trends = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 71:
        if ftype == TType.STRING:
          self.category_list = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 72:
        if ftype == TType.STRING:
          self.crumbs = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 73:
        if ftype == TType.I64:
          self.crawl_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 74:
        if ftype == TType.I64:
          self.content_timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 75:
        if ftype == TType.I64:
          self.duration_seconds = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 76:
        if ftype == TType.LIST:
          self.OBSOLETE_inlink = []
          (_etype117, _size114) = iprot.readListBegin()
          for _i118 in xrange(_size114):
            _elem119 = iprot.readString();
            self.OBSOLETE_inlink.append(_elem119)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 77:
        if ftype == TType.LIST:
          self.OBSOLETE_outlink = []
          (_etype123, _size120) = iprot.readListBegin()
          for _i124 in xrange(_size120):
            _elem125 = iprot.readString();
            self.OBSOLETE_outlink.append(_elem125)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 78:
        if ftype == TType.I32:
          self.page_state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 79:
        if ftype == TType.STRUCT:
          self.crawl_history = le_crawler.proto.crawl.ttypes.CrawlHistory()
          self.crawl_history.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.I64:
          self.doc_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 81:
        if ftype == TType.I64:
          self.discover_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 82:
        if ftype == TType.LIST:
          self.in_links = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = le_crawler.proto.crawl.ttypes.Anchor()
            _elem131.read(iprot)
            self.in_links.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 83:
        if ftype == TType.STRUCT:
          self.user = OriginalUser()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 84:
        if ftype == TType.STRING:
          self.playlist = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 85:
        if ftype == TType.STRING:
          self.dimension = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 86:
        if ftype == TType.BOOL:
          self.caption = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 87:
        if ftype == TType.I64:
          self.comment_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 88:
        if ftype == TType.I32:
          self.source_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 89:
        if ftype == TType.STRING:
          self.thumbnails = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.I16:
          self.content_quality = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 91:
        if ftype == TType.STRING:
          self.player = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 92:
        if ftype == TType.LIST:
          self.thumbnail_list = []
          (_etype135, _size132) = iprot.readListBegin()
          for _i136 in xrange(_size132):
            _elem137 = le_crawler.proto.crawl.ttypes.Thumbnail()
            _elem137.read(iprot)
            self.thumbnail_list.append(_elem137)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 93:
        if ftype == TType.BOOL:
          self.dead_link = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 94:
        if ftype == TType.STRING:
          self.stream_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 95:
        if ftype == TType.I32:
          self.language_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 96:
        if ftype == TType.LIST:
          self.inlink_history = []
          (_etype141, _size138) = iprot.readListBegin()
          for _i142 in xrange(_size138):
            _elem143 = []
            (_etype147, _size144) = iprot.readListBegin()
            for _i148 in xrange(_size144):
              _elem149 = le_crawler.proto.crawl.ttypes.Anchor()
              _elem149.read(iprot)
              _elem143.append(_elem149)
            iprot.readListEnd()
            self.inlink_history.append(_elem143)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 97:
        if ftype == TType.STRUCT:
          self.region_strategy = le_crawler.proto.crawl.ttypes.RegionStrategy()
          self.region_strategy.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 98:
        if ftype == TType.STRING:
          self.external_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 99:
        if ftype == TType.STRING:
          self.user_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.STRING:
          self.global_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 101:
        if ftype == TType.LIST:
          self.artists = []
          (_etype153, _size150) = iprot.readListBegin()
          for _i154 in xrange(_size150):
            _elem155 = Artist()
            _elem155.read(iprot)
            self.artists.append(_elem155)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 102:
        if ftype == TType.STRUCT:
          self.album = Album()
          self.album.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 103:
        if ftype == TType.LIST:
          self.author = []
          (_etype159, _size156) = iprot.readListBegin()
          for _i160 in xrange(_size156):
            _elem161 = Artist()
            _elem161.read(iprot)
            self.author.append(_elem161)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 104:
        if ftype == TType.LIST:
          self.composer = []
          (_etype165, _size162) = iprot.readListBegin()
          for _i166 in xrange(_size162):
            _elem167 = Artist()
            _elem167.read(iprot)
            self.composer.append(_elem167)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 105:
        if ftype == TType.LIST:
          self.arranger = []
          (_etype171, _size168) = iprot.readListBegin()
          for _i172 in xrange(_size168):
            _elem173 = Artist()
            _elem173.read(iprot)
            self.arranger.append(_elem173)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 106:
        if ftype == TType.STRING:
          self.lyrics = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 107:
        if ftype == TType.I32:
          self.share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 108:
        if ftype == TType.I32:
          self.data_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 109:
        if ftype == TType.LIST:
          self.awards = []
          (_etype177, _size174) = iprot.readListBegin()
          for _i178 in xrange(_size174):
            _elem179 = iprot.readString();
            self.awards.append(_elem179)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 110:
        if ftype == TType.LIST:
          self.long_comments = []
          (_etype183, _size180) = iprot.readListBegin()
          for _i184 in xrange(_size180):
            _elem185 = iprot.readString();
            self.long_comments.append(_elem185)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 111:
        if ftype == TType.LIST:
          self.short_comments = []
          (_etype189, _size186) = iprot.readListBegin()
          for _i190 in xrange(_size186):
            _elem191 = iprot.readString();
            self.short_comments.append(_elem191)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MediaVideo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 2)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.domain_id is not None:
      oprot.writeFieldBegin('domain_id', TType.I32, 3)
      oprot.writeI32(self.domain_id)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRING, 4)
      oprot.writeString(self.category)
      oprot.writeFieldEnd()
    if self.category_id is not None:
      oprot.writeFieldBegin('category_id', TType.STRING, 5)
      oprot.writeString(self.category_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 6)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.subtitle is not None:
      oprot.writeFieldBegin('subtitle', TType.STRING, 7)
      oprot.writeString(self.subtitle)
      oprot.writeFieldEnd()
    if self.title_other is not None:
      oprot.writeFieldBegin('title_other', TType.STRING, 8)
      oprot.writeString(self.title_other)
      oprot.writeFieldEnd()
    if self.title_en is not None:
      oprot.writeFieldBegin('title_en', TType.STRING, 9)
      oprot.writeString(self.title_en)
      oprot.writeFieldEnd()
    if self.actor is not None:
      oprot.writeFieldBegin('actor', TType.STRING, 10)
      oprot.writeString(self.actor)
      oprot.writeFieldEnd()
    if self.actor_id is not None:
      oprot.writeFieldBegin('actor_id', TType.STRING, 11)
      oprot.writeString(self.actor_id)
      oprot.writeFieldEnd()
    if self.director is not None:
      oprot.writeFieldBegin('director', TType.STRING, 12)
      oprot.writeString(self.director)
      oprot.writeFieldEnd()
    if self.director_id is not None:
      oprot.writeFieldBegin('director_id', TType.STRING, 13)
      oprot.writeString(self.director_id)
      oprot.writeFieldEnd()
    if self.writer is not None:
      oprot.writeFieldBegin('writer', TType.STRING, 14)
      oprot.writeString(self.writer)
      oprot.writeFieldEnd()
    if self.writer_id is not None:
      oprot.writeFieldBegin('writer_id', TType.STRING, 15)
      oprot.writeString(self.writer_id)
      oprot.writeFieldEnd()
    if self.showtime is not None:
      oprot.writeFieldBegin('showtime', TType.STRING, 16)
      oprot.writeString(self.showtime)
      oprot.writeFieldEnd()
    if self.showyear is not None:
      oprot.writeFieldBegin('showyear', TType.I32, 17)
      oprot.writeI32(self.showyear)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 18)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.subcategory is not None:
      oprot.writeFieldBegin('subcategory', TType.STRING, 19)
      oprot.writeString(self.subcategory)
      oprot.writeFieldEnd()
    if self.subcategory_id is not None:
      oprot.writeFieldBegin('subcategory_id', TType.STRING, 20)
      oprot.writeString(self.subcategory_id)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 21)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.language_id is not None:
      oprot.writeFieldBegin('language_id', TType.I32, 22)
      oprot.writeI32(self.language_id)
      oprot.writeFieldEnd()
    if self.fit_age is not None:
      oprot.writeFieldBegin('fit_age', TType.STRING, 23)
      oprot.writeString(self.fit_age)
      oprot.writeFieldEnd()
    if self.fit_age_id is not None:
      oprot.writeFieldBegin('fit_age_id', TType.STRING, 24)
      oprot.writeString(self.fit_age_id)
      oprot.writeFieldEnd()
    if self.short_desc is not None:
      oprot.writeFieldBegin('short_desc', TType.STRING, 25)
      oprot.writeString(self.short_desc)
      oprot.writeFieldEnd()
    if self.desc is not None:
      oprot.writeFieldBegin('desc', TType.STRING, 26)
      oprot.writeString(self.desc)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.STRING, 27)
      oprot.writeString(self.tags)
      oprot.writeFieldEnd()
    if self.poster is not None:
      oprot.writeFieldBegin('poster', TType.STRING, 28)
      oprot.writeString(self.poster)
      oprot.writeFieldEnd()
    if self.collects is not None:
      oprot.writeFieldBegin('collects', TType.I64, 29)
      oprot.writeI64(self.collects)
      oprot.writeFieldEnd()
    if self.rating is not None:
      oprot.writeFieldBegin('rating', TType.DOUBLE, 30)
      oprot.writeDouble(self.rating)
      oprot.writeFieldEnd()
    if self.commentator is not None:
      oprot.writeFieldBegin('commentator', TType.I32, 31)
      oprot.writeI32(self.commentator)
      oprot.writeFieldEnd()
    if self.episodes is not None:
      oprot.writeFieldBegin('episodes', TType.I32, 32)
      oprot.writeI32(self.episodes)
      oprot.writeFieldEnd()
    if self.is_end is not None:
      oprot.writeFieldBegin('is_end', TType.I32, 33)
      oprot.writeI32(self.is_end)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 34)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.quality is not None:
      oprot.writeFieldBegin('quality', TType.STRING, 35)
      oprot.writeString(self.quality)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.STRING, 36)
      oprot.writeString(self.duration)
      oprot.writeFieldEnd()
    if self.copyright is not None:
      oprot.writeFieldBegin('copyright', TType.I32, 37)
      oprot.writeI32(self.copyright)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 38)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 39)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 40)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 41)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.version_id is not None:
      oprot.writeFieldBegin('version_id', TType.I32, 42)
      oprot.writeI32(self.version_id)
      oprot.writeFieldEnd()
    if self.is_pay is not None:
      oprot.writeFieldBegin('is_pay', TType.I32, 43)
      oprot.writeI32(self.is_pay)
      oprot.writeFieldEnd()
    if self.play_day_total is not None:
      oprot.writeFieldBegin('play_day_total', TType.I64, 44)
      oprot.writeI64(self.play_day_total)
      oprot.writeFieldEnd()
    if self.play_week_total is not None:
      oprot.writeFieldBegin('play_week_total', TType.I64, 45)
      oprot.writeI64(self.play_week_total)
      oprot.writeFieldEnd()
    if self.play_month_total is not None:
      oprot.writeFieldBegin('play_month_total', TType.I64, 46)
      oprot.writeI64(self.play_month_total)
      oprot.writeFieldEnd()
    if self.play_season_total is not None:
      oprot.writeFieldBegin('play_season_total', TType.I64, 47)
      oprot.writeI64(self.play_season_total)
      oprot.writeFieldEnd()
    if self.play_year_total is not None:
      oprot.writeFieldBegin('play_year_total', TType.I64, 48)
      oprot.writeI64(self.play_year_total)
      oprot.writeFieldEnd()
    if self.play_total is not None:
      oprot.writeFieldBegin('play_total', TType.I64, 49)
      oprot.writeI64(self.play_total)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 50)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 51)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.delete_time is not None:
      oprot.writeFieldBegin('delete_time', TType.I64, 52)
      oprot.writeI64(self.delete_time)
      oprot.writeFieldEnd()
    if self.platform_download is not None:
      oprot.writeFieldBegin('platform_download', TType.STRING, 53)
      oprot.writeString(self.platform_download)
      oprot.writeFieldEnd()
    if self.platform_play is not None:
      oprot.writeFieldBegin('platform_play', TType.STRING, 54)
      oprot.writeString(self.platform_play)
      oprot.writeFieldEnd()
    if self.platform_pay is not None:
      oprot.writeFieldBegin('platform_pay', TType.STRING, 55)
      oprot.writeString(self.platform_pay)
      oprot.writeFieldEnd()
    if self.publish_status is not None:
      oprot.writeFieldBegin('publish_status', TType.STRING, 56)
      oprot.writeString(self.publish_status)
      oprot.writeFieldEnd()
    if self.douban_id is not None:
      oprot.writeFieldBegin('douban_id', TType.STRING, 57)
      oprot.writeString(self.douban_id)
      oprot.writeFieldEnd()
    if self.resolution is not None:
      oprot.writeFieldBegin('resolution', TType.STRING, 59)
      oprot.writeString(self.resolution)
      oprot.writeFieldEnd()
    if self.is_edit is not None:
      oprot.writeFieldBegin('is_edit', TType.I32, 60)
      oprot.writeI32(self.is_edit)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.MAP, 61)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
      for kiter192,viter193 in self.extend.items():
        oprot.writeString(kiter192)
        oprot.writeString(viter193)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.episode is not None:
      oprot.writeFieldBegin('episode', TType.STRING, 62)
      oprot.writeString(self.episode)
      oprot.writeFieldEnd()
    if self.porder is not None:
      oprot.writeFieldBegin('porder', TType.I32, 63)
      oprot.writeI32(self.porder)
      oprot.writeFieldEnd()
    if self.dup is not None:
      oprot.writeFieldBegin('dup', TType.BOOL, 64)
      oprot.writeBool(self.dup)
      oprot.writeFieldEnd()
    if self.is_404 is not None:
      oprot.writeFieldBegin('is_404', TType.BOOL, 65)
      oprot.writeBool(self.is_404)
      oprot.writeFieldEnd()
    if self.is_soft404 is not None:
      oprot.writeFieldBegin('is_soft404', TType.BOOL, 66)
      oprot.writeBool(self.is_soft404)
      oprot.writeFieldEnd()
    if self.area_id is not None:
      oprot.writeFieldBegin('area_id', TType.STRING, 67)
      oprot.writeString(self.area_id)
      oprot.writeFieldEnd()
    if self.voteup_count is not None:
      oprot.writeFieldBegin('voteup_count', TType.I64, 68)
      oprot.writeI64(self.voteup_count)
      oprot.writeFieldEnd()
    if self.votedown_count is not None:
      oprot.writeFieldBegin('votedown_count', TType.I64, 69)
      oprot.writeI64(self.votedown_count)
      oprot.writeFieldEnd()
    if self.play_trends is not None:
      oprot.writeFieldBegin('play_trends', TType.STRING, 70)
      oprot.writeString(self.play_trends)
      oprot.writeFieldEnd()
    if self.category_list is not None:
      oprot.writeFieldBegin('category_list', TType.STRING, 71)
      oprot.writeString(self.category_list)
      oprot.writeFieldEnd()
    if self.crumbs is not None:
      oprot.writeFieldBegin('crumbs', TType.STRING, 72)
      oprot.writeString(self.crumbs)
      oprot.writeFieldEnd()
    if self.crawl_time is not None:
      oprot.writeFieldBegin('crawl_time', TType.I64, 73)
      oprot.writeI64(self.crawl_time)
      oprot.writeFieldEnd()
    if self.content_timestamp is not None:
      oprot.writeFieldBegin('content_timestamp', TType.I64, 74)
      oprot.writeI64(self.content_timestamp)
      oprot.writeFieldEnd()
    if self.duration_seconds is not None:
      oprot.writeFieldBegin('duration_seconds', TType.I64, 75)
      oprot.writeI64(self.duration_seconds)
      oprot.writeFieldEnd()
    if self.OBSOLETE_inlink is not None:
      oprot.writeFieldBegin('OBSOLETE_inlink', TType.LIST, 76)
      oprot.writeListBegin(TType.STRING, len(self.OBSOLETE_inlink))
      for iter194 in self.OBSOLETE_inlink:
        oprot.writeString(iter194)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.OBSOLETE_outlink is not None:
      oprot.writeFieldBegin('OBSOLETE_outlink', TType.LIST, 77)
      oprot.writeListBegin(TType.STRING, len(self.OBSOLETE_outlink))
      for iter195 in self.OBSOLETE_outlink:
        oprot.writeString(iter195)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page_state is not None:
      oprot.writeFieldBegin('page_state', TType.I32, 78)
      oprot.writeI32(self.page_state)
      oprot.writeFieldEnd()
    if self.crawl_history is not None:
      oprot.writeFieldBegin('crawl_history', TType.STRUCT, 79)
      self.crawl_history.write(oprot)
      oprot.writeFieldEnd()
    if self.doc_id is not None:
      oprot.writeFieldBegin('doc_id', TType.I64, 80)
      oprot.writeI64(self.doc_id)
      oprot.writeFieldEnd()
    if self.discover_time is not None:
      oprot.writeFieldBegin('discover_time', TType.I64, 81)
      oprot.writeI64(self.discover_time)
      oprot.writeFieldEnd()
    if self.in_links is not None:
      oprot.writeFieldBegin('in_links', TType.LIST, 82)
      oprot.writeListBegin(TType.STRUCT, len(self.in_links))
      for iter196 in self.in_links:
        iter196.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 83)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.playlist is not None:
      oprot.writeFieldBegin('playlist', TType.STRING, 84)
      oprot.writeString(self.playlist)
      oprot.writeFieldEnd()
    if self.dimension is not None:
      oprot.writeFieldBegin('dimension', TType.STRING, 85)
      oprot.writeString(self.dimension)
      oprot.writeFieldEnd()
    if self.caption is not None:
      oprot.writeFieldBegin('caption', TType.BOOL, 86)
      oprot.writeBool(self.caption)
      oprot.writeFieldEnd()
    if self.comment_num is not None:
      oprot.writeFieldBegin('comment_num', TType.I64, 87)
      oprot.writeI64(self.comment_num)
      oprot.writeFieldEnd()
    if self.source_type is not None:
      oprot.writeFieldBegin('source_type', TType.I32, 88)
      oprot.writeI32(self.source_type)
      oprot.writeFieldEnd()
    if self.thumbnails is not None:
      oprot.writeFieldBegin('thumbnails', TType.STRING, 89)
      oprot.writeString(self.thumbnails)
      oprot.writeFieldEnd()
    if self.content_quality is not None:
      oprot.writeFieldBegin('content_quality', TType.I16, 90)
      oprot.writeI16(self.content_quality)
      oprot.writeFieldEnd()
    if self.player is not None:
      oprot.writeFieldBegin('player', TType.STRING, 91)
      oprot.writeString(self.player)
      oprot.writeFieldEnd()
    if self.thumbnail_list is not None:
      oprot.writeFieldBegin('thumbnail_list', TType.LIST, 92)
      oprot.writeListBegin(TType.STRUCT, len(self.thumbnail_list))
      for iter197 in self.thumbnail_list:
        iter197.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.dead_link is not None:
      oprot.writeFieldBegin('dead_link', TType.BOOL, 93)
      oprot.writeBool(self.dead_link)
      oprot.writeFieldEnd()
    if self.stream_url is not None:
      oprot.writeFieldBegin('stream_url', TType.STRING, 94)
      oprot.writeString(self.stream_url)
      oprot.writeFieldEnd()
    if self.language_type is not None:
      oprot.writeFieldBegin('language_type', TType.I32, 95)
      oprot.writeI32(self.language_type)
      oprot.writeFieldEnd()
    if self.inlink_history is not None:
      oprot.writeFieldBegin('inlink_history', TType.LIST, 96)
      oprot.writeListBegin(TType.LIST, len(self.inlink_history))
      for iter198 in self.inlink_history:
        oprot.writeListBegin(TType.STRUCT, len(iter198))
        for iter199 in iter198:
          iter199.write(oprot)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.region_strategy is not None:
      oprot.writeFieldBegin('region_strategy', TType.STRUCT, 97)
      self.region_strategy.write(oprot)
      oprot.writeFieldEnd()
    if self.external_id is not None:
      oprot.writeFieldBegin('external_id', TType.STRING, 98)
      oprot.writeString(self.external_id)
      oprot.writeFieldEnd()
    if self.user_url is not None:
      oprot.writeFieldBegin('user_url', TType.STRING, 99)
      oprot.writeString(self.user_url)
      oprot.writeFieldEnd()
    if self.global_id is not None:
      oprot.writeFieldBegin('global_id', TType.STRING, 100)
      oprot.writeString(self.global_id)
      oprot.writeFieldEnd()
    if self.artists is not None:
      oprot.writeFieldBegin('artists', TType.LIST, 101)
      oprot.writeListBegin(TType.STRUCT, len(self.artists))
      for iter200 in self.artists:
        iter200.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.album is not None:
      oprot.writeFieldBegin('album', TType.STRUCT, 102)
      self.album.write(oprot)
      oprot.writeFieldEnd()
    if self.author is not None:
      oprot.writeFieldBegin('author', TType.LIST, 103)
      oprot.writeListBegin(TType.STRUCT, len(self.author))
      for iter201 in self.author:
        iter201.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.composer is not None:
      oprot.writeFieldBegin('composer', TType.LIST, 104)
      oprot.writeListBegin(TType.STRUCT, len(self.composer))
      for iter202 in self.composer:
        iter202.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.arranger is not None:
      oprot.writeFieldBegin('arranger', TType.LIST, 105)
      oprot.writeListBegin(TType.STRUCT, len(self.arranger))
      for iter203 in self.arranger:
        iter203.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.lyrics is not None:
      oprot.writeFieldBegin('lyrics', TType.STRING, 106)
      oprot.writeString(self.lyrics)
      oprot.writeFieldEnd()
    if self.share_num is not None:
      oprot.writeFieldBegin('share_num', TType.I32, 107)
      oprot.writeI32(self.share_num)
      oprot.writeFieldEnd()
    if self.data_type is not None:
      oprot.writeFieldBegin('data_type', TType.I32, 108)
      oprot.writeI32(self.data_type)
      oprot.writeFieldEnd()
    if self.awards is not None:
      oprot.writeFieldBegin('awards', TType.LIST, 109)
      oprot.writeListBegin(TType.STRING, len(self.awards))
      for iter204 in self.awards:
        oprot.writeString(iter204)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.long_comments is not None:
      oprot.writeFieldBegin('long_comments', TType.LIST, 110)
      oprot.writeListBegin(TType.STRING, len(self.long_comments))
      for iter205 in self.long_comments:
        oprot.writeString(iter205)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.short_comments is not None:
      oprot.writeFieldBegin('short_comments', TType.LIST, 111)
      oprot.writeListBegin(TType.STRING, len(self.short_comments))
      for iter206 in self.short_comments:
        oprot.writeString(iter206)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MediaVideoAbstract:
  """
  Attributes:
   - id
   - episode
   - porder
   - type_id
   - create_time
   - title
   - play_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'episode', None, None, ), # 2
    (3, TType.I32, 'porder', None, None, ), # 3
    (4, TType.I32, 'type_id', None, None, ), # 4
    (5, TType.I64, 'create_time', None, None, ), # 5
    (6, TType.STRING, 'title', None, None, ), # 6
    (7, TType.STRING, 'play_url', None, None, ), # 7
  )

  def __init__(self, id=None, episode=None, porder=None, type_id=None, create_time=None, title=None, play_url=None,):
    self.id = id
    self.episode = episode
    self.porder = porder
    self.type_id = type_id
    self.create_time = create_time
    self.title = title
    self.play_url = play_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.episode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.porder = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.play_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MediaVideoAbstract')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.episode is not None:
      oprot.writeFieldBegin('episode', TType.STRING, 2)
      oprot.writeString(self.episode)
      oprot.writeFieldEnd()
    if self.porder is not None:
      oprot.writeFieldBegin('porder', TType.I32, 3)
      oprot.writeI32(self.porder)
      oprot.writeFieldEnd()
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 4)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 5)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 6)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.play_url is not None:
      oprot.writeFieldBegin('play_url', TType.STRING, 7)
      oprot.writeString(self.play_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.episode is None:
      raise TProtocol.TProtocolException(message='Required field episode is unset!')
    if self.porder is None:
      raise TProtocol.TProtocolException(message='Required field porder is unset!')
    if self.type_id is None:
      raise TProtocol.TProtocolException(message='Required field type_id is unset!')
    if self.create_time is None:
      raise TProtocol.TProtocolException(message='Required field create_time is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MediaAlbum:
  """
  Attributes:
   - id
   - source
   - source_id
   - category
   - category_id
   - title
   - subtitle
   - title_other
   - title_en
   - actor
   - actor_id
   - director
   - director_id
   - writer
   - writer_id
   - showtime
   - showyear
   - area
   - subcategory
   - subcategory_id
   - language
   - language_id
   - fit_age
   - fit_age_id
   - short_description
   - description
   - tags
   - poster
   - collects
   - rating
   - commentator
   - episodes
   - is_end
   - play_url
   - quality
   - duration
   - copyright
   - state
   - type
   - type_id
   - version
   - version_id
   - is_pay
   - play_day_total
   - play_week_total
   - play_month_total
   - play_season_total
   - play_year_total
   - play_total
   - create_time
   - update_time
   - delete_time
   - platform_download
   - platform_play
   - platform_pay
   - publish_status
   - douban_id
   - videos
   - play_stream
   - is_edit
   - extend
   - now_episode
   - area_id
   - starring
   - starring_id
   - play_control_platform
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'source', None, None, ), # 2
    (3, TType.I32, 'source_id', None, None, ), # 3
    (4, TType.STRING, 'category', None, None, ), # 4
    (5, TType.I32, 'category_id', None, None, ), # 5
    (6, TType.STRING, 'title', None, None, ), # 6
    (7, TType.STRING, 'subtitle', None, None, ), # 7
    (8, TType.STRING, 'title_other', None, None, ), # 8
    (9, TType.STRING, 'title_en', None, None, ), # 9
    (10, TType.STRING, 'actor', None, None, ), # 10
    (11, TType.STRING, 'actor_id', None, None, ), # 11
    (12, TType.STRING, 'director', None, None, ), # 12
    (13, TType.STRING, 'director_id', None, None, ), # 13
    (14, TType.STRING, 'writer', None, None, ), # 14
    (15, TType.STRING, 'writer_id', None, None, ), # 15
    (16, TType.STRING, 'showtime', None, None, ), # 16
    (17, TType.I32, 'showyear', None, None, ), # 17
    (18, TType.STRING, 'area', None, None, ), # 18
    (19, TType.STRING, 'subcategory', None, None, ), # 19
    (20, TType.STRING, 'subcategory_id', None, None, ), # 20
    (21, TType.STRING, 'language', None, None, ), # 21
    (22, TType.I32, 'language_id', None, None, ), # 22
    (23, TType.STRING, 'fit_age', None, None, ), # 23
    (24, TType.STRING, 'fit_age_id', None, None, ), # 24
    (25, TType.STRING, 'short_description', None, None, ), # 25
    (26, TType.STRING, 'description', None, None, ), # 26
    (27, TType.STRING, 'tags', None, None, ), # 27
    (28, TType.STRING, 'poster', None, None, ), # 28
    (29, TType.I64, 'collects', None, None, ), # 29
    (30, TType.DOUBLE, 'rating', None, None, ), # 30
    (31, TType.I32, 'commentator', None, None, ), # 31
    (32, TType.I32, 'episodes', None, None, ), # 32
    (33, TType.I32, 'is_end', None, None, ), # 33
    (34, TType.STRING, 'play_url', None, None, ), # 34
    (35, TType.I32, 'quality', None, None, ), # 35
    (36, TType.STRING, 'duration', None, None, ), # 36
    (37, TType.I32, 'copyright', None, None, ), # 37
    (38, TType.I32, 'state', None, None, ), # 38
    (39, TType.STRING, 'type', None, None, ), # 39
    (40, TType.I32, 'type_id', None, None, ), # 40
    (41, TType.STRING, 'version', None, None, ), # 41
    (42, TType.I32, 'version_id', None, None, ), # 42
    (43, TType.I32, 'is_pay', None, None, ), # 43
    (44, TType.I64, 'play_day_total', None, None, ), # 44
    (45, TType.I64, 'play_week_total', None, None, ), # 45
    (46, TType.I64, 'play_month_total', None, None, ), # 46
    (47, TType.I64, 'play_season_total', None, None, ), # 47
    (48, TType.I64, 'play_year_total', None, None, ), # 48
    (49, TType.I64, 'play_total', None, None, ), # 49
    (50, TType.I64, 'create_time', None, None, ), # 50
    (51, TType.I64, 'update_time', None, None, ), # 51
    (52, TType.I64, 'delete_time', None, None, ), # 52
    (53, TType.STRING, 'platform_download', None, None, ), # 53
    (54, TType.STRING, 'platform_play', None, None, ), # 54
    (55, TType.STRING, 'platform_pay', None, None, ), # 55
    (56, TType.STRING, 'publish_status', None, None, ), # 56
    (57, TType.STRING, 'douban_id', None, None, ), # 57
    (58, TType.LIST, 'videos', (TType.STRUCT,(MediaVideoAbstract, MediaVideoAbstract.thrift_spec)), None, ), # 58
    (59, TType.STRING, 'play_stream', None, None, ), # 59
    (60, TType.I32, 'is_edit', None, None, ), # 60
    (61, TType.MAP, 'extend', (TType.STRING,None,TType.STRING,None), None, ), # 61
    (62, TType.I32, 'now_episode', None, None, ), # 62
    (63, TType.STRING, 'area_id', None, None, ), # 63
    (64, TType.STRING, 'starring', None, None, ), # 64
    (65, TType.STRING, 'starring_id', None, None, ), # 65
    (66, TType.STRING, 'play_control_platform', None, None, ), # 66
  )

  def __init__(self, id=None, source=None, source_id=None, category=None, category_id=None, title=None, subtitle=None, title_other=None, title_en=None, actor=None, actor_id=None, director=None, director_id=None, writer=None, writer_id=None, showtime=None, showyear=None, area=None, subcategory=None, subcategory_id=None, language=None, language_id=None, fit_age=None, fit_age_id=None, short_description=None, description=None, tags=None, poster=None, collects=None, rating=None, commentator=None, episodes=None, is_end=None, play_url=None, quality=None, duration=None, copyright=None, state=None, type=None, type_id=None, version=None, version_id=None, is_pay=None, play_day_total=None, play_week_total=None, play_month_total=None, play_season_total=None, play_year_total=None, play_total=None, create_time=None, update_time=None, delete_time=None, platform_download=None, platform_play=None, platform_pay=None, publish_status=None, douban_id=None, videos=None, play_stream=None, is_edit=None, extend=None, now_episode=None, area_id=None, starring=None, starring_id=None, play_control_platform=None,):
    self.id = id
    self.source = source
    self.source_id = source_id
    self.category = category
    self.category_id = category_id
    self.title = title
    self.subtitle = subtitle
    self.title_other = title_other
    self.title_en = title_en
    self.actor = actor
    self.actor_id = actor_id
    self.director = director
    self.director_id = director_id
    self.writer = writer
    self.writer_id = writer_id
    self.showtime = showtime
    self.showyear = showyear
    self.area = area
    self.subcategory = subcategory
    self.subcategory_id = subcategory_id
    self.language = language
    self.language_id = language_id
    self.fit_age = fit_age
    self.fit_age_id = fit_age_id
    self.short_description = short_description
    self.description = description
    self.tags = tags
    self.poster = poster
    self.collects = collects
    self.rating = rating
    self.commentator = commentator
    self.episodes = episodes
    self.is_end = is_end
    self.play_url = play_url
    self.quality = quality
    self.duration = duration
    self.copyright = copyright
    self.state = state
    self.type = type
    self.type_id = type_id
    self.version = version
    self.version_id = version_id
    self.is_pay = is_pay
    self.play_day_total = play_day_total
    self.play_week_total = play_week_total
    self.play_month_total = play_month_total
    self.play_season_total = play_season_total
    self.play_year_total = play_year_total
    self.play_total = play_total
    self.create_time = create_time
    self.update_time = update_time
    self.delete_time = delete_time
    self.platform_download = platform_download
    self.platform_play = platform_play
    self.platform_pay = platform_pay
    self.publish_status = publish_status
    self.douban_id = douban_id
    self.videos = videos
    self.play_stream = play_stream
    self.is_edit = is_edit
    self.extend = extend
    self.now_episode = now_episode
    self.area_id = area_id
    self.starring = starring
    self.starring_id = starring_id
    self.play_control_platform = play_control_platform

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.source_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.category = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.category_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.subtitle = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.title_other = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.title_en = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.actor = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.actor_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.director = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.director_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.writer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.writer_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.showtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.showyear = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.subcategory = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.subcategory_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.language = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.language_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.fit_age = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.fit_age_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.short_description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.STRING:
          self.tags = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.poster = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.collects = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.rating = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.commentator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.episodes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.is_end = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.play_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.quality = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.duration = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.copyright = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.type_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.version_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.is_pay = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I64:
          self.play_day_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I64:
          self.play_week_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I64:
          self.play_month_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I64:
          self.play_season_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I64:
          self.play_year_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I64:
          self.play_total = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I64:
          self.create_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I64:
          self.delete_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.STRING:
          self.platform_download = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.STRING:
          self.platform_play = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.STRING:
          self.platform_pay = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.STRING:
          self.publish_status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.STRING:
          self.douban_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.LIST:
          self.videos = []
          (_etype210, _size207) = iprot.readListBegin()
          for _i211 in xrange(_size207):
            _elem212 = MediaVideoAbstract()
            _elem212.read(iprot)
            self.videos.append(_elem212)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.play_stream = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.is_edit = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.MAP:
          self.extend = {}
          (_ktype214, _vtype215, _size213 ) = iprot.readMapBegin()
          for _i217 in xrange(_size213):
            _key218 = iprot.readString();
            _val219 = iprot.readString();
            self.extend[_key218] = _val219
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.I32:
          self.now_episode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRING:
          self.area_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.STRING:
          self.starring = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.STRING:
          self.starring_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.STRING:
          self.play_control_platform = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MediaAlbum')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 2)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.source_id is not None:
      oprot.writeFieldBegin('source_id', TType.I32, 3)
      oprot.writeI32(self.source_id)
      oprot.writeFieldEnd()
    if self.category is not None:
      oprot.writeFieldBegin('category', TType.STRING, 4)
      oprot.writeString(self.category)
      oprot.writeFieldEnd()
    if self.category_id is not None:
      oprot.writeFieldBegin('category_id', TType.I32, 5)
      oprot.writeI32(self.category_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 6)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.subtitle is not None:
      oprot.writeFieldBegin('subtitle', TType.STRING, 7)
      oprot.writeString(self.subtitle)
      oprot.writeFieldEnd()
    if self.title_other is not None:
      oprot.writeFieldBegin('title_other', TType.STRING, 8)
      oprot.writeString(self.title_other)
      oprot.writeFieldEnd()
    if self.title_en is not None:
      oprot.writeFieldBegin('title_en', TType.STRING, 9)
      oprot.writeString(self.title_en)
      oprot.writeFieldEnd()
    if self.actor is not None:
      oprot.writeFieldBegin('actor', TType.STRING, 10)
      oprot.writeString(self.actor)
      oprot.writeFieldEnd()
    if self.actor_id is not None:
      oprot.writeFieldBegin('actor_id', TType.STRING, 11)
      oprot.writeString(self.actor_id)
      oprot.writeFieldEnd()
    if self.director is not None:
      oprot.writeFieldBegin('director', TType.STRING, 12)
      oprot.writeString(self.director)
      oprot.writeFieldEnd()
    if self.director_id is not None:
      oprot.writeFieldBegin('director_id', TType.STRING, 13)
      oprot.writeString(self.director_id)
      oprot.writeFieldEnd()
    if self.writer is not None:
      oprot.writeFieldBegin('writer', TType.STRING, 14)
      oprot.writeString(self.writer)
      oprot.writeFieldEnd()
    if self.writer_id is not None:
      oprot.writeFieldBegin('writer_id', TType.STRING, 15)
      oprot.writeString(self.writer_id)
      oprot.writeFieldEnd()
    if self.showtime is not None:
      oprot.writeFieldBegin('showtime', TType.STRING, 16)
      oprot.writeString(self.showtime)
      oprot.writeFieldEnd()
    if self.showyear is not None:
      oprot.writeFieldBegin('showyear', TType.I32, 17)
      oprot.writeI32(self.showyear)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 18)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.subcategory is not None:
      oprot.writeFieldBegin('subcategory', TType.STRING, 19)
      oprot.writeString(self.subcategory)
      oprot.writeFieldEnd()
    if self.subcategory_id is not None:
      oprot.writeFieldBegin('subcategory_id', TType.STRING, 20)
      oprot.writeString(self.subcategory_id)
      oprot.writeFieldEnd()
    if self.language is not None:
      oprot.writeFieldBegin('language', TType.STRING, 21)
      oprot.writeString(self.language)
      oprot.writeFieldEnd()
    if self.language_id is not None:
      oprot.writeFieldBegin('language_id', TType.I32, 22)
      oprot.writeI32(self.language_id)
      oprot.writeFieldEnd()
    if self.fit_age is not None:
      oprot.writeFieldBegin('fit_age', TType.STRING, 23)
      oprot.writeString(self.fit_age)
      oprot.writeFieldEnd()
    if self.fit_age_id is not None:
      oprot.writeFieldBegin('fit_age_id', TType.STRING, 24)
      oprot.writeString(self.fit_age_id)
      oprot.writeFieldEnd()
    if self.short_description is not None:
      oprot.writeFieldBegin('short_description', TType.STRING, 25)
      oprot.writeString(self.short_description)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 26)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.STRING, 27)
      oprot.writeString(self.tags)
      oprot.writeFieldEnd()
    if self.poster is not None:
      oprot.writeFieldBegin('poster', TType.STRING, 28)
      oprot.writeString(self.poster)
      oprot.writeFieldEnd()
    if self.collects is not None:
      oprot.writeFieldBegin('collects', TType.I64, 29)
      oprot.writeI64(self.collects)
      oprot.writeFieldEnd()
    if self.rating is not None:
      oprot.writeFieldBegin('rating', TType.DOUBLE, 30)
      oprot.writeDouble(self.rating)
      oprot.writeFieldEnd()
    if self.commentator is not None:
      oprot.writeFieldBegin('commentator', TType.I32, 31)
      oprot.writeI32(self.commentator)
      oprot.writeFieldEnd()
    if self.episodes is not None:
      oprot.writeFieldBegin('episodes', TType.I32, 32)
      oprot.writeI32(self.episodes)
      oprot.writeFieldEnd()
    if self.is_end is not None:
      oprot.writeFieldBegin('is_end', TType.I32, 33)
      oprot.writeI32(self.is_end)
      oprot.writeFieldEnd()
    if self.play_url is not None:
      oprot.writeFieldBegin('play_url', TType.STRING, 34)
      oprot.writeString(self.play_url)
      oprot.writeFieldEnd()
    if self.quality is not None:
      oprot.writeFieldBegin('quality', TType.I32, 35)
      oprot.writeI32(self.quality)
      oprot.writeFieldEnd()
    if self.duration is not None:
      oprot.writeFieldBegin('duration', TType.STRING, 36)
      oprot.writeString(self.duration)
      oprot.writeFieldEnd()
    if self.copyright is not None:
      oprot.writeFieldBegin('copyright', TType.I32, 37)
      oprot.writeI32(self.copyright)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 38)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 39)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.type_id is not None:
      oprot.writeFieldBegin('type_id', TType.I32, 40)
      oprot.writeI32(self.type_id)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 41)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.version_id is not None:
      oprot.writeFieldBegin('version_id', TType.I32, 42)
      oprot.writeI32(self.version_id)
      oprot.writeFieldEnd()
    if self.is_pay is not None:
      oprot.writeFieldBegin('is_pay', TType.I32, 43)
      oprot.writeI32(self.is_pay)
      oprot.writeFieldEnd()
    if self.play_day_total is not None:
      oprot.writeFieldBegin('play_day_total', TType.I64, 44)
      oprot.writeI64(self.play_day_total)
      oprot.writeFieldEnd()
    if self.play_week_total is not None:
      oprot.writeFieldBegin('play_week_total', TType.I64, 45)
      oprot.writeI64(self.play_week_total)
      oprot.writeFieldEnd()
    if self.play_month_total is not None:
      oprot.writeFieldBegin('play_month_total', TType.I64, 46)
      oprot.writeI64(self.play_month_total)
      oprot.writeFieldEnd()
    if self.play_season_total is not None:
      oprot.writeFieldBegin('play_season_total', TType.I64, 47)
      oprot.writeI64(self.play_season_total)
      oprot.writeFieldEnd()
    if self.play_year_total is not None:
      oprot.writeFieldBegin('play_year_total', TType.I64, 48)
      oprot.writeI64(self.play_year_total)
      oprot.writeFieldEnd()
    if self.play_total is not None:
      oprot.writeFieldBegin('play_total', TType.I64, 49)
      oprot.writeI64(self.play_total)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I64, 50)
      oprot.writeI64(self.create_time)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 51)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.delete_time is not None:
      oprot.writeFieldBegin('delete_time', TType.I64, 52)
      oprot.writeI64(self.delete_time)
      oprot.writeFieldEnd()
    if self.platform_download is not None:
      oprot.writeFieldBegin('platform_download', TType.STRING, 53)
      oprot.writeString(self.platform_download)
      oprot.writeFieldEnd()
    if self.platform_play is not None:
      oprot.writeFieldBegin('platform_play', TType.STRING, 54)
      oprot.writeString(self.platform_play)
      oprot.writeFieldEnd()
    if self.platform_pay is not None:
      oprot.writeFieldBegin('platform_pay', TType.STRING, 55)
      oprot.writeString(self.platform_pay)
      oprot.writeFieldEnd()
    if self.publish_status is not None:
      oprot.writeFieldBegin('publish_status', TType.STRING, 56)
      oprot.writeString(self.publish_status)
      oprot.writeFieldEnd()
    if self.douban_id is not None:
      oprot.writeFieldBegin('douban_id', TType.STRING, 57)
      oprot.writeString(self.douban_id)
      oprot.writeFieldEnd()
    if self.videos is not None:
      oprot.writeFieldBegin('videos', TType.LIST, 58)
      oprot.writeListBegin(TType.STRUCT, len(self.videos))
      for iter220 in self.videos:
        iter220.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.play_stream is not None:
      oprot.writeFieldBegin('play_stream', TType.STRING, 59)
      oprot.writeString(self.play_stream)
      oprot.writeFieldEnd()
    if self.is_edit is not None:
      oprot.writeFieldBegin('is_edit', TType.I32, 60)
      oprot.writeI32(self.is_edit)
      oprot.writeFieldEnd()
    if self.extend is not None:
      oprot.writeFieldBegin('extend', TType.MAP, 61)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.extend))
      for kiter221,viter222 in self.extend.items():
        oprot.writeString(kiter221)
        oprot.writeString(viter222)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.now_episode is not None:
      oprot.writeFieldBegin('now_episode', TType.I32, 62)
      oprot.writeI32(self.now_episode)
      oprot.writeFieldEnd()
    if self.area_id is not None:
      oprot.writeFieldBegin('area_id', TType.STRING, 63)
      oprot.writeString(self.area_id)
      oprot.writeFieldEnd()
    if self.starring is not None:
      oprot.writeFieldBegin('starring', TType.STRING, 64)
      oprot.writeString(self.starring)
      oprot.writeFieldEnd()
    if self.starring_id is not None:
      oprot.writeFieldBegin('starring_id', TType.STRING, 65)
      oprot.writeString(self.starring_id)
      oprot.writeFieldEnd()
    if self.play_control_platform is not None:
      oprot.writeFieldBegin('play_control_platform', TType.STRING, 66)
      oprot.writeString(self.play_control_platform)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.source is None:
      raise TProtocol.TProtocolException(message='Required field source is unset!')
    if self.source_id is None:
      raise TProtocol.TProtocolException(message='Required field source_id is unset!')
    if self.category is None:
      raise TProtocol.TProtocolException(message='Required field category is unset!')
    if self.category_id is None:
      raise TProtocol.TProtocolException(message='Required field category_id is unset!')
    if self.title is None:
      raise TProtocol.TProtocolException(message='Required field title is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
