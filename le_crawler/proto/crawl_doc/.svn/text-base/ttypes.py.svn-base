#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import le_crawler.proto.video.ttypes
import le_crawler.proto.crawl.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ExtendMap:
  """
  Attributes:
   - raw_url
   - page_index
   - position
   - sub_category_num
   - doc_type
   - users
   - videos
   - albums
   - artists
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'raw_url', None, None, ), # 1
    (2, TType.I32, 'page_index', None, 1, ), # 2
    (3, TType.I32, 'position', None, 0, ), # 3
    (4, TType.I32, 'sub_category_num', None, 0, ), # 4
    (5, TType.I32, 'doc_type', None, None, ), # 5
    (6, TType.LIST, 'users', (TType.STRUCT,(le_crawler.proto.video.ttypes.OriginalUser, le_crawler.proto.video.ttypes.OriginalUser.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'videos', (TType.STRUCT,(le_crawler.proto.video.ttypes.MediaVideo, le_crawler.proto.video.ttypes.MediaVideo.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'albums', (TType.STRUCT,(le_crawler.proto.video.ttypes.Album, le_crawler.proto.video.ttypes.Album.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'artists', (TType.STRUCT,(le_crawler.proto.video.ttypes.Artist, le_crawler.proto.video.ttypes.Artist.thrift_spec)), None, ), # 9
  )

  def __init__(self, raw_url=None, page_index=thrift_spec[2][4], position=thrift_spec[3][4], sub_category_num=thrift_spec[4][4], doc_type=None, users=None, videos=None, albums=None, artists=None,):
    self.raw_url = raw_url
    self.page_index = page_index
    self.position = position
    self.sub_category_num = sub_category_num
    self.doc_type = doc_type
    self.users = users
    self.videos = videos
    self.albums = albums
    self.artists = artists

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.raw_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.page_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.position = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sub_category_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.doc_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.users = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = le_crawler.proto.video.ttypes.OriginalUser()
            _elem5.read(iprot)
            self.users.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.videos = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = le_crawler.proto.video.ttypes.MediaVideo()
            _elem11.read(iprot)
            self.videos.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.albums = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = le_crawler.proto.video.ttypes.Album()
            _elem17.read(iprot)
            self.albums.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.artists = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = le_crawler.proto.video.ttypes.Artist()
            _elem23.read(iprot)
            self.artists.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExtendMap')
    if self.raw_url is not None:
      oprot.writeFieldBegin('raw_url', TType.STRING, 1)
      oprot.writeString(self.raw_url)
      oprot.writeFieldEnd()
    if self.page_index is not None:
      oprot.writeFieldBegin('page_index', TType.I32, 2)
      oprot.writeI32(self.page_index)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.I32, 3)
      oprot.writeI32(self.position)
      oprot.writeFieldEnd()
    if self.sub_category_num is not None:
      oprot.writeFieldBegin('sub_category_num', TType.I32, 4)
      oprot.writeI32(self.sub_category_num)
      oprot.writeFieldEnd()
    if self.doc_type is not None:
      oprot.writeFieldBegin('doc_type', TType.I32, 5)
      oprot.writeI32(self.doc_type)
      oprot.writeFieldEnd()
    if self.users is not None:
      oprot.writeFieldBegin('users', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.users))
      for iter24 in self.users:
        iter24.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.videos is not None:
      oprot.writeFieldBegin('videos', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.videos))
      for iter25 in self.videos:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.albums is not None:
      oprot.writeFieldBegin('albums', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.albums))
      for iter26 in self.albums:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.artists is not None:
      oprot.writeFieldBegin('artists', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.artists))
      for iter27 in self.artists:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CrawlDoc:
  """
  Attributes:
   - id
   - discover_time
   - schedule_time
   - crawl_time
   - schedule_doc_type
   - page_type
   - doc_type
   - request
   - response
   - url
   - in_links
   - out_links
   - crawl_history
   - page_state
   - video
   - domain
   - domain_id
   - videos
   - extend_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'discover_time', None, None, ), # 2
    (3, TType.I64, 'schedule_time', None, None, ), # 3
    (4, TType.I64, 'crawl_time', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    (8, TType.I32, 'schedule_doc_type', None,     0, ), # 8
    (9, TType.I32, 'page_type', None, None, ), # 9
    (10, TType.I32, 'doc_type', None, None, ), # 10
    (11, TType.STRUCT, 'request', (le_crawler.proto.crawl.ttypes.Request, le_crawler.proto.crawl.ttypes.Request.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'response', (le_crawler.proto.crawl.ttypes.Response, le_crawler.proto.crawl.ttypes.Response.thrift_spec), None, ), # 12
    None, # 13
    (14, TType.STRING, 'url', None, None, ), # 14
    (15, TType.LIST, 'in_links', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.Anchor, le_crawler.proto.crawl.ttypes.Anchor.thrift_spec)), None, ), # 15
    (16, TType.LIST, 'out_links', (TType.STRUCT,(le_crawler.proto.crawl.ttypes.Anchor, le_crawler.proto.crawl.ttypes.Anchor.thrift_spec)), None, ), # 16
    (17, TType.STRUCT, 'crawl_history', (le_crawler.proto.crawl.ttypes.CrawlHistory, le_crawler.proto.crawl.ttypes.CrawlHistory.thrift_spec), None, ), # 17
    (18, TType.I32, 'page_state', None,     0, ), # 18
    (19, TType.STRUCT, 'video', (le_crawler.proto.video.ttypes.MediaVideo, le_crawler.proto.video.ttypes.MediaVideo.thrift_spec), None, ), # 19
    (20, TType.STRING, 'domain', None, None, ), # 20
    (21, TType.I32, 'domain_id', None, None, ), # 21
    (22, TType.LIST, 'videos', (TType.STRUCT,(le_crawler.proto.video.ttypes.MediaVideo, le_crawler.proto.video.ttypes.MediaVideo.thrift_spec)), None, ), # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.STRUCT, 'extend_map', (ExtendMap, ExtendMap.thrift_spec), None, ), # 100
  )

  def __init__(self, id=None, discover_time=None, schedule_time=None, crawl_time=None, schedule_doc_type=thrift_spec[8][4], page_type=None, doc_type=None, request=None, response=None, url=None, in_links=None, out_links=None, crawl_history=None, page_state=thrift_spec[18][4], video=None, domain=None, domain_id=None, videos=None, extend_map=None,):
    self.id = id
    self.discover_time = discover_time
    self.schedule_time = schedule_time
    self.crawl_time = crawl_time
    self.schedule_doc_type = schedule_doc_type
    self.page_type = page_type
    self.doc_type = doc_type
    self.request = request
    self.response = response
    self.url = url
    self.in_links = in_links
    self.out_links = out_links
    self.crawl_history = crawl_history
    self.page_state = page_state
    self.video = video
    self.domain = domain
    self.domain_id = domain_id
    self.videos = videos
    self.extend_map = extend_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.discover_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.schedule_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.crawl_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.schedule_doc_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.page_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.doc_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.request = le_crawler.proto.crawl.ttypes.Request()
          self.request.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.response = le_crawler.proto.crawl.ttypes.Response()
          self.response.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.in_links = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = le_crawler.proto.crawl.ttypes.Anchor()
            _elem33.read(iprot)
            self.in_links.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.out_links = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = le_crawler.proto.crawl.ttypes.Anchor()
            _elem39.read(iprot)
            self.out_links.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.crawl_history = le_crawler.proto.crawl.ttypes.CrawlHistory()
          self.crawl_history.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.page_state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.video = le_crawler.proto.video.ttypes.MediaVideo()
          self.video.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.domain = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.domain_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.videos = []
          (_etype43, _size40) = iprot.readListBegin()
          for _i44 in xrange(_size40):
            _elem45 = le_crawler.proto.video.ttypes.MediaVideo()
            _elem45.read(iprot)
            self.videos.append(_elem45)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.STRUCT:
          self.extend_map = ExtendMap()
          self.extend_map.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CrawlDoc')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.discover_time is not None:
      oprot.writeFieldBegin('discover_time', TType.I64, 2)
      oprot.writeI64(self.discover_time)
      oprot.writeFieldEnd()
    if self.schedule_time is not None:
      oprot.writeFieldBegin('schedule_time', TType.I64, 3)
      oprot.writeI64(self.schedule_time)
      oprot.writeFieldEnd()
    if self.crawl_time is not None:
      oprot.writeFieldBegin('crawl_time', TType.I64, 4)
      oprot.writeI64(self.crawl_time)
      oprot.writeFieldEnd()
    if self.schedule_doc_type is not None:
      oprot.writeFieldBegin('schedule_doc_type', TType.I32, 8)
      oprot.writeI32(self.schedule_doc_type)
      oprot.writeFieldEnd()
    if self.page_type is not None:
      oprot.writeFieldBegin('page_type', TType.I32, 9)
      oprot.writeI32(self.page_type)
      oprot.writeFieldEnd()
    if self.doc_type is not None:
      oprot.writeFieldBegin('doc_type', TType.I32, 10)
      oprot.writeI32(self.doc_type)
      oprot.writeFieldEnd()
    if self.request is not None:
      oprot.writeFieldBegin('request', TType.STRUCT, 11)
      self.request.write(oprot)
      oprot.writeFieldEnd()
    if self.response is not None:
      oprot.writeFieldBegin('response', TType.STRUCT, 12)
      self.response.write(oprot)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 14)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.in_links is not None:
      oprot.writeFieldBegin('in_links', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.in_links))
      for iter46 in self.in_links:
        iter46.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.out_links is not None:
      oprot.writeFieldBegin('out_links', TType.LIST, 16)
      oprot.writeListBegin(TType.STRUCT, len(self.out_links))
      for iter47 in self.out_links:
        iter47.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.crawl_history is not None:
      oprot.writeFieldBegin('crawl_history', TType.STRUCT, 17)
      self.crawl_history.write(oprot)
      oprot.writeFieldEnd()
    if self.page_state is not None:
      oprot.writeFieldBegin('page_state', TType.I32, 18)
      oprot.writeI32(self.page_state)
      oprot.writeFieldEnd()
    if self.video is not None:
      oprot.writeFieldBegin('video', TType.STRUCT, 19)
      self.video.write(oprot)
      oprot.writeFieldEnd()
    if self.domain is not None:
      oprot.writeFieldBegin('domain', TType.STRING, 20)
      oprot.writeString(self.domain)
      oprot.writeFieldEnd()
    if self.domain_id is not None:
      oprot.writeFieldBegin('domain_id', TType.I32, 21)
      oprot.writeI32(self.domain_id)
      oprot.writeFieldEnd()
    if self.videos is not None:
      oprot.writeFieldBegin('videos', TType.LIST, 22)
      oprot.writeListBegin(TType.STRUCT, len(self.videos))
      for iter48 in self.videos:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.extend_map is not None:
      oprot.writeFieldBegin('extend_map', TType.STRUCT, 100)
      self.extend_map.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
