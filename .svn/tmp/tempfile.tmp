#!/usr/bin/python
# coding=utf8
#
# Copyright 2015 LeTV Inc. All Rights Reserved.
__author__ = 'guoxiaohe@letv.cn'

import signal
from le_crawler.common.logutil import Log
thrift_logger = Log('thrift.server.TServer', 'log/thrift_scheduler.error').log
from optparse import OptionParser

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.server import TServer

from le_crawler.common.crawler_db import CrawlerDBManger
from le_crawler.proto.scheduler import SchedulerService


class SchedulerHandler(object):
  def __init__(self, crawl_db, logger):
    self.logger_ = logger
    self.crawl_db_ = crawl_db
    self.request_logger_ = Log('out_requset_log', 'log/out_request.log').log


  # api
  def ping(self):
    return True


  # api
  def get_crawldocs(self, required_num):
    try:
      self.logger_.debug('getting crawldocs...')
      docs = self.crawl_db_.get_crawldocs(required_num)
      self.logger_.debug('got crawldocs, amount: %s' % len(docs))
      #for doc in docs:
      #  self.request_logger_.info('get crawldoc, url: %s' % doc.url)
      return docs
    except:
      self.logger_.exception('failed to get crawl_docs.')
      return []


  # api
  def set_crawldocs(self, docs):
    try:
      self.logger_.debug('setting crawldocs, amount: %s...' % len(docs))
      if not docs:
        self.logger_.debug('empty crawldocs, skip.')
        return
      self.crawl_db_.set_crawldocs(docs)
      self.logger_.debug('finish setting crawldocs, [%s]' % len(docs))
    except:
      self.logger_.exception('failed to set crawl_docs.')


class SchedulerServiceMain(object):
  def __init__(self):
    self.logger_ = Log('scheduler_log', 'log/scheduler.log').log
    self.crawl_db_ = CrawlerDBManger('database', self.logger_)
    self.exit_ = False


  def close(self, num, fram):
    self.exit_ = True
    try:
      self.socket_.close()
      self.crawl_db_.stop()
      self.logger_.info('close transport')
    except:
      self.logger_.exception('failed to close transport.')


  def run(self, host, port):
    self.socket_ = TSocket.TServerSocket(host, port)
    # this flag daemon set true is for stop service by outside signal
    self.service = TServer.TThreadedServer(SchedulerService.Processor(SchedulerHandler(self.crawl_db_, self.logger_)),
                                           self.socket_,
                                           TTransport.TBufferedTransportFactory(),
                                           TCompactProtocol.TCompactProtocolFactory(),
                                           daemon=True)
    self.logger_.info('begin server on %s, %s' % (host, port))
    self.service.serve()


scheduler = SchedulerServiceMain()

signal.signal(signal.SIGINT, scheduler.close)
signal.signal(signal.SIGTERM, scheduler.close)


if __name__ == '__main__':
  option_parser = OptionParser()
  option_parser.add_option('-H', '--host', type='string', dest='host',
                           default='10.150.140.84', help="service host")
  option_parser.add_option('-p', '--port', type='int', dest='port',
                           default=8088, help="service port")
  options, _ = option_parser.parse_args()
  scheduler.run(options.host, options.port)

